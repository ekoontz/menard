{"a" [{:cat :det
       :sem {:pred :some}
       :agr {:number :sing}}]
 "an" [{:exception true
        :sem {:pred :some}
        :cat :det :agr {:number :sing}}]
 "at" [{:cat :prep
        :sem {:pred :at}}]
 "for" [{:cat :prep
         :sem {:pred :for}}]
 "her" [{:cat :det
         :sem {:pred :she}}]
 "his" [{:cat :det
         :sem {:pred :he}}]
 "in" [{:cat :prep
        :sem {:pred :in}}]
 "its" [{:cat :det
         :sem {:pred :it}}]
 "my" [{:cat :det
        :sem {:pred :i}}]
 "nine" [{:cat :det
          :agr {:number :plur}
          :sem {:pred :nine}}]
 "no" [{:cat :det
        :definite? false
        :sem {:pred :none}}] ;; no [:agr :number]: could be :plur or :sing.
 "not" (let [sem (atom {:polarity :minus})
             infl-base (atom :base)
             infl-gerund (atom :gerund)
             infl-infinitive (atom :infinitive)
             slash (atom :top)
             common-part {:cat :neg
                          :sem sem
                          :slash? slash
                          :subcat {:1 {:cat :verb
                                       :aux? false
                                       :sem sem
                                       :slash? slash}
                                   :2 []}}
             input
             [{:infl infl-base
               :subcat {:1 {:modal :none
                            :infl infl-base}}}
              {:infl infl-gerund
               :subcat {:1 {:modal :none
                            :infl infl-gerund}}}
              {:infl infl-infinitive
               :subcat {:1 {:modal :infinitive
                            :infl infl-infinitive}}}]]
        (map (fn [sense]
               (dag_unify.core/unify sense
                                     common-part))
             input))
 "of" [{:cat :prep
        :sem {:pred :of}}]
 "on" [{:cat :prep
        :sem {:pred :on}}]
 "our" [{:cat :det
         :sem {:pred :we}}]
 "out" [{:cat :prep
        :sem {:pred :out}}]
 "some" [{:cat :det
          :sem {:pred :some
                :countable? true}
          :agr {:number :plur}}
         {:cat :det
          :sem {:pred :some
                :countable? false}
          :agr {:number :sing}}]

 "that" [;; "[comp1 +that [s-slash you *see]]"
         {:cat :comp
          :slash? true
          :sense 1
          :subcat {:1 {:cat :verb
                       :subcat {:1 {:cat :noun
                                    :case :acc
                                    :reflexive? false}
                                :2 []}
                       :slash? true}
                   :2 []}}

         ;; "[comp1 +that [vp sees you]]"
         ;; in this case agreement is with the subject of the vp, so :agr must be percolated upwards:
         (let [agr (atom :top)]
           {:cat :comp
            :agr agr
            :slash? false
            :sense 2
            :subcat {:1 {:agr agr
                         :cat :verb
                         :subcat {:1 {:agr agr
                                      :cat :noun
                                      :case :nom}
                                  :2 []}
                         :slash? false}
                     :2 []}})

         ;; [comp2 +that .[s you will see a cat]]
         {:cat :comp
          :subcat {:1 {:cat :verb
                       :sem {:mood :declarative}
                       :subcat []}
                   :2 []}}
         ;; "that book"
         {:cat :det
          :agr {:number :sing}
          :sem {:pred :that}}]
 "the" [{:cat :det
         :sem {:pred :the}}]
 "their" [{:cat :det
           :sem {:pred :they}}]
 "these" [;; "these books"
          {:cat :det
           :agr {:number :plur}
           :sem {:pred :this}}]
 "this" [;; "this book"
         {:cat :det
          :agr {:number :sing}
          :sem {:pred :this}}]
 
 ;; "those books"
 "those" [{:cat :det
           :agr {:number :plur}
           :sem {:pred :that}}]
 "to" [;; "to the park"
       {:cat :prep
        :sense :p1
        :sem {:pred :to}}]
 "up" [{:cat :prep
        :sem {:pred :up}}]
 "your" [{:cat :det
          :sem {:pred :you}}]}


