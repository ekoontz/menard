{
 "abandon" [{:sem {:pred :abandon}}]
 "accept" [{:sem {:pred :accept}}]  
 "accompany" [{:sem {:pred :accompany}}] 
 "achieve" [{:sem {:pred :achieve}}]
 "add" [{:sem {:pred :add}}]
 "announce" [{ :sem {:pred :announce}}]
 "answer" [{:sem {:pred :answer}}]
 "approve" [{:sem {:pred :approve}}] 
 "arrive" [{:intransitive-only? true
            :sem {:pred :arrive}}] 
 "ask" [{:sem {:pred :ask}}
        {:prepositional-verb {:with "for"}
         :sem {:pred :ask-for}}]
 "assure" [{ :sem {:pred :assure}}]
 "avoid" [{ :sem {:pred :avoid}}]
 "bark" [{ :sem {:pred :bark}}]
 "be" (let [exceptions [{:infl :present :agr {:person :1st :number :sing} :surface "am"}
                        {:infl :present :agr {:person :2nd} :surface "are"}                                                
                        {:infl :present :agr {:person :3rd :number :sing} :surface "is"}
                        {:infl :present :agr {:number :plur} :surface "are"}
                        {:infl :past-simple :agr {:number :plur} :surface "were"}
                        {:infl :past-simple :agr {:person :2nd} :surface "were"}
                        {:infl :past-simple :agr {:person :1st :number :sing} :surface "was"}
                        {:infl :past-simple :agr {:person :3rd :number :sing} :surface "was"}                        
                        {:infl :past-participle :surface "been"}]]
        [{:sense 1
          :sem {:pred :be}
          :intransitive? true
          :exceptions exceptions}

         ;; "I am sure"
         (let [obj (atom {:top :top})]
           {:sense 3
            :reflexive? false
            :sem {:pred :be
                  :obj obj}
            :subcat {:1 {:cat :noun}
                     :2 {:cat :adjective
                         :subcat []
                         :sem obj}
                     :3 []}
            :exceptions exceptions})

         ;; "I am able to sleep"
         (let [subj (atom :top)
               embedded-sem (atom {:subj subj})
               reflexive? (atom :top)
               sem (atom {:subj subj
                          :obj embedded-sem})]
           {:sense 4
            :sem sem
            :modal :adjective
            :reflexive? reflexive?
            :subcat {:1 {:cat :noun
                         :sem subj}
                     :2 {:cat :adjective
                         :reflexive? reflexive?
                         :subcat {:1 {:sem subj}}
                         :sem sem}}
            :exceptions exceptions})
         
         { ;; the 'is' in 'is sleeping" (aux sense, participle complement)
          :sense 5
          :aux? true
          :infl :present
          :modal :present-participle
          :sem {:tense :present
                :mental-state? false
                :aspect :progressive}
          :exceptions exceptions}
         
         { ;; the 'was' in 'was sleeping' (aux sense, participle complement)
          :sense 6
          :aux? true
          :infl :past-simple
          :modal :present-participle
          :sem {:tense :past
                :mental-state? false                
                :aspect :progressive}
          :exceptions exceptions}

         ;; TODO: add passive "was+{:modal :past-participle}" e.g. "the mouse was caught by the cat"
         
         (;; the 'is' or 'was' in 'is born' or 'was born'
          let [subj (atom {:animate? true})]
          {:sense 7
           :reflexive? false
           :aux? false
           :sem {:pred :be-born
                 :subj subj
                 :obj :none
                 :iobj :none}
           :subcat {:1 {:sem subj}
                    :2 {:cat :adjective
                        :phrasal? false
                        :pred :born
                        :canonical "born"
                        :surface "born"}
                    :3 []}
           :exceptions exceptions})

         (;; the 'is' or 'was' in 'is named' or 'was named'
          let [subj (atom :top)]
          {:sense 8
           :reflexive? false
           :aux? false
           :sem {:pred :be-called
                 :subj subj
                 :obj :none
                 :iobj :none}
           :subcat {:1 {:sem subj}
                    :2 {:cat :verb
                        :infl :past-simple
                        :phrasal? false
                        :canonical "name"
                        :subcat {:1 {:top :top} :2 []}}
                    :3 []}
           :exceptions exceptions})
         ])
         

 "become" (let [exceptions [{:infl :past-simple
                             :surface "became"}
                            {:infl :past-participle
                             :surface "become"}]]
           [{ :sem {:pred :become}
             :exceptions exceptions}])

 "begin" (let [exceptions [{:infl :past-simple
                            :surface "began"}
                           {:infl :past-participle
                            :surface "begun"}]]
          [{ :sem {:pred :begin}
            :exceptions exceptions}])

 "believe" [{:sense 1
             :sem {:pred :believe}}

            {:sense 2
             :reflexive? false
             :sem {:pred :believe}
             :subcat {:2 {:cat :verb
                          :rule "s"}}}

            {:sense 3
             :reflexive? false
             :sem {:pred :believe}
             :subcat {:2 {:cat :comp
                          :rule "comp2"}}}]
 "blow" (let [exceptions [{:infl :past-simple
                           :surface "blew"}
                          {:infl :past-participle
                           :surface "blown"}]]
          [{:sem {:pred :blow}
            :exceptions exceptions}])
 "boil" [{:sem {:pred :boil}}]
 "break" (let [exceptions [{:infl :past-simple
                           :surface "broke"}
                          {:infl :past-participle
                           :surface "broken"}]]
           [{:sem {:pred :break}
             :exceptions exceptions}])
 "bring" (let [exceptions [{:infl :past-simple
                           :surface "brought"}
                          {:infl :past-participle
                           :surface "brought"}]]
           [{:sem {:pred :bring}
             :exceptions exceptions}])
 "bubble" [{:sem {:pred :bubble}}]
 "buy" [{:sem {:pred :buy}
         :exceptions [{:infl :present
                       :agr {:person :3rd :number :sing}
                       :surface "buys"}
                      {:infl :past-simple
                       :surface "bought"}
                      {:infl :past-participle
                       :surface "bought"}]}]
 "call" [{:sem {:pred :call}}]
 "can" [{:modal :base
         :sem {:pred :be-able-to}
         :intransitive? true
         :transitive? true         
         :infl :present}]
 "cancel" [{:sem {:pred :cancel}}]
 "carry" [{ :sem {:pred :carry}}]
 "cause" [{:sem {:pred :cause}}]
 "change" [{:sense 1
            :sem {:pred :change}}
           {:sense 2
            :sem {:pred :change-clothes}
            :nominal-verb {:with "clothes"
                           :number :plur}}]
 "cheat" [{:sem {:pred :cheat}}]
 "clean" [{:sem {:pred :clean}}]
 "close" [{:sem {:pred :close}}]
 "comb" [{:sem {:pred :comb-oneself}
          :reflexive? true}]
 "come" (let [exceptions [{:infl :past-simple
                           :surface "came"}
                          {:infl :past-participle
                           :surface "come"}]]
          [{:intransitive-only? true
            :sem {:pred :come}
            :exceptions exceptions}])
 "comment" [{:sem {:pred :comment}}]
 "complain" [{:sem {:pred :complain}}]
 "confess" [{:sem {:pred :confess}}]
 "consent" [{:sem {:pred :consent}}]
 "conserve" [{:sem {:pred :conserve}}]
 "consider" [{:sem {:pred :consider}}]
 "convert" [{:sem {:pred :convert}}] 
 "correspond" [{:sem {:pred :correspond}}]
 "cough" [{:sem {:pred :cough}}]
;; "could" [{:modal :base
;;           :sem {:pred :be-able-to}
;;           :infl :past-simple
;;           :subcat {:2 {:canonical "have"
;;                        :infl :base}}}]
 "count" [{:sem {:pred :count}}] 
 "create" [{:sem {:pred :create}}]
 "cry" [{:intransitive-only? true
         :sem {:pred :cry}}] 
 "cut" [{:sem {:pred :cut}
         :exceptions [{:infl :past-simple
                       :surface "cut"}
                      {:infl :past-participle
                       :surface "cut"}]}]
 "damage" [{:sem {:pred :damage}}]
 "dance" [{:sem {:pred :dance}}]
 "decide" [{:sem {:pred :decide}}] 
 "defend" [{:sem {:pred :defend}}]
 "deny" [{:sem {:pred :deny}}] 
 "depart" [{:sem {:pred :depart}}]
 "design" [{:sem {:pred :design}}]
 "desire" [{:sem {:pred :desire}}] 
 "develop" [{:sem {:pred :develop}}]
 "dig" [{:sem {:pred :dig}
         :exceptions [{:infl :past-simple
                       :surface "dug"}
                      {:infl :past-participle
                       :surface "dug"}]}]
 "do" (let [exceptions [{:infl :past-simple :surface "did"}
                        {:infl :past-participle :surface "done"}]
            agr (atom :top)]
        [{;; "I do", "I did"
          :exceptions exceptions
          :sense 1
          :sem {:pred :do}}
         
         ;; "do you sleep?", "does he sleep?"
         {:agr agr
          :exceptions exceptions
          
          :aux? true
          :infl :present
          :sense 2
          :reflexive? false
          :sem {:aspect :habitual
                :tense :present
                :mood :interrogative}
          :subcat {:1 {:cat :verb
                       :aux? false
                       :agr agr
                       :rule "s-comp"
                       :phrasal? true
                       :sem {:mood :declarative}
                       :subcat []
                       :infl :base}
                   :2 []}}

         ;; "did you sleep?"
         (let [sem (atom {:tense :past
                          :mood :interrogative})]
           {:agr agr
            :exceptions exceptions

            :aux? true
            :infl :past-simple
            :sense 3
            :sem sem
            :subcat {:1 {:cat :verb
                         :aux? false
                         :agr agr
                         :rule "s-comp"
                         :phrasal? true
                         :sem sem
                         :subcat []
                         :infl :base}
                     :2 []}})

         ;; "what did she see?"
         (let [sem (atom {:tense :past
                          :mood :interrogative
                          :aspect :progressive})]
           {:agr agr
            :exceptions exceptions
            
            :reflexive? false
            :aux? true
            :infl :past-simple
            :sense 4
            :sem sem
            :subcat {:1 {:cat :verb
                         :slash? true
                         :aux? false
                         :agr agr
                         :phrasal? true
                         :sem sem
                         :subcat {:1 {:wh-word true}
                                  :2 []}
                         :infl :base}
                     :2 []}})
         ;; "what does she see?"
         (let [sem (atom {:tense :present
                          :mood :interrogative
                          :aspect :progressive})]
           {:agr agr
            :exceptions exceptions
            
            :reflexive? false
            :aux? true
            :infl :present
            :sense 5
            :sem sem
            :subcat {:1 {:cat :verb
                         :slash? true
                         :aux? false
                         :agr agr
                         :phrasal? true
                         :sem sem
                         :subcat {:1 {:wh-word true}
                                  :2 []}
                         :infl :base}
                     :2 []}})])

 "dream" [{:sem {:pred :dream}}]
 "draw" [{:sem {:pred :draw}
          :exceptions [{:infl :past-simple :surface "drew"}
                       {:infl :past-participle :surface "drawn"}]}]
 "drink" [{:sem {:pred :drink}
           :exceptions [{:infl :past-simple :surface "drank"}
                        {:infl :past-participle :surface "drunk"}]}]
 "drive" [{:sem {:pred :drive}
          :exceptions [{:infl :past-simple :surface "drove"}
                       {:infl :past-participle :surface "drove"}]}]
 "eat" (let [exceptions [{:infl :past-simple :surface "ate"}
                         {:infl :past-participle :surface "eaten"}]]
         [{:exceptions exceptions :sem {:pred :eat}}])
 "earn" [{ :sem {:pred :earn}}]
 "elaborate" [{:sem {:pred :elaborate}}]
 "embrace" [{:sem {:pred :embrace}}]
 "emigrate" [{:sem {:pred :emigrate}}]
 "enjoy" [{:sem {:pred :enjoy}}]
 "enter" [{:sem {:pred :enter}}]
 "escape" [{:sem {:pred :escape}}] 
 "exist" [{:sem {:pred :exist}}]
 "experience" [{:sem {:pred :experience}}]
 "explain" [{:sem {:pred :explain}}]
 "express" [{:sem {:pred :express}}] 
 "fall" (let [exceptions [{:infl :past-simple :surface "fell"}
                          {:infl :past-participle :surface "fallen"}]]
          [{:exceptions exceptions
            :intransitive-only? true
            :sem {:pred :fall}
            :sense 1}
           {:exceptions exceptions
            :sem {:pred :fall-asleep}
            :adjectival-verb {:with "asleep"}
            :sense 2}])
 "feed" [{:sem {:pred :feed}
          :exceptions [{:infl :past-simple
                        :surface "fed"}
                       {:infl :past-participle
                        :surface "fed"}]}]

 "feel" (let [exceptions [{:infl :past-simple :surface "felt"}
                          {:infl :past-participle :surface "felt"}]]
           [{:exceptions exceptions  :sem {:pred :feel}}])
 "fill" [{:sem {:pred :fill}}]
 "find" (let [exceptions [{:infl :past-simple :surface "found"}
                          {:infl :past-participle :surface "found"}]]
          [{:exceptions exceptions  :sem {:pred :find}}])
 "finish" [{:sem {:pred :finish}}]
 "fit" [{:sem {:pred :fit}
         :exceptions [{:infl :past-simple :surface "fit"}
                      {:infl :past-participle :surface "fit"}]}]
 "follow" [{:sem {:pred :follow}}]
 "forget" (let [exceptions [{:infl :past-simple :surface "forgot"}
                          {:infl :past-participle :surface "forgotten"}]]
          [{:exceptions exceptions  :sem {:pred :forget}}])
 "form" [{:sem {:pred :form}}]
 "function" [{:sem {:pred :work-nonhuman
                    :subj {:ref {:human? false}}}}]
 "get" (let [exceptions [{:infl :past-simple :surface "got"}
                         {:infl :past-participle :surface "gotten"}]]
         [{:exceptions exceptions
           :sem {:pred :get}}
          {:exceptions exceptions
           :sem {:pred :get-angry}
           :adjectival-verb {:with "angry"}}
          {:exceptions exceptions
           :sem {:pred :get-married}
           :adjectival-verb {:with "married"}}
          {:exceptions exceptions
           :sem {:pred :get-up}
           :prepositional-verb {:with "up"}}])
          
 "give" (let [exceptions [{:infl :past-simple :surface "gave"}
                          {:infl :past-participle :surface "given"}]]
          [{:exceptions exceptions
            :sem {:pred :give}
            :intransitive-only? true}
           {:exceptions exceptions
            :ditransitive? true
            :subcat {:2 {:cat :prep
                         :sem {:pred :to}}
                     :3 {:cat :noun}}
            :sem {:pred :give}}])
 "go"
 (let [exceptions [{:infl :past-simple :surface "went"}
                   {:infl :past-participle :surface "gone"}]]
   [{:exceptions exceptions
     :sem {:pred :go
           :intransitive-only? true}}
    {:exceptions exceptions
      :sem {:pred :go}
     :subcat {:2 {:cat :prep
                  :sem {:pred :to}}
              :3 []}}

    {:exceptions exceptions
     :prepositional-verb {:with "out"}
     :sem {:pred :go-out}}

    {:exceptions exceptions
     :prepositional-verb {:with "to bed"}
     :sem {:pred :go-to-bed}}])
 
 "guess" [{:sem {:pred :guess}}]
 "have" (let [;; TODO: factor out commonalities in agreement into a new variable called 'agr-exceptions' and then
              ;; multiply by aux-exceptions and non-aux-exceptions.
              aux-exceptions [{:agr {:person :1st} :surface "have" :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :2nd} :surface "have" :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :3rd :number :sing}
                               :surface "has" :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:agr {:person :3rd :number :plur}
                               :surface "have"
                               :infl :present
                               :sem {:tense :past
                                     :aspect :perfect}}
                              {:sem {:tense :past
                                     :aspect :pluperfect}
                               :surface "had"
                               :infl :past-simple}]
              non-aux-exceptions [{:agr {:person :1st} :surface "have" :infl :present}
                                  {:agr {:person :2nd} :surface "have" :infl :present}
                                  {:agr {:person :3rd :number :sing} :surface "has" :infl :present}
                                  {:agr {:person :3rd :number :plur} :surface "have" :infl :present}
                                  {:surface "had" :infl :past-simple}
                                  {:surface "had" :infl :past-participle}]]
          [{;; {:aux? false} not needed because of rule: aux-default-is-false,
            ;; but made explicit for contrast with aux=true senses below of this verb.
            :aux? false
            :sense 1
            :sem {:pred :have}
            :exceptions non-aux-exceptions}

           {:sense 2
            :aux? true
            :infl :present
            :modal :past-participle
            :sem {:tense :past
                  :aspect :perfect}
            :exceptions aux-exceptions}

           {:sense 3
            :aux? true
            :infl :past-simple
            :surface "had"
            :inflected? true
            :modal :past-participle
            :sem {:tense :past
                  :aspect :pluperfect}
            :exceptions aux-exceptions}

           {:sense 4
            :aux? false
            :reflexive? false
            :nominal-verb {:with "dinner"}
            :sem {:pred :have-dinner}
            :exceptions non-aux-exceptions}

           {:sense 5
            :aux? false
            :reflexive? false
            :nominal-verb {:with "fun"}
            :sem {:pred :have-fun}
            :exceptions non-aux-exceptions}

           {:sense 6
            :aux? false
            :reflexive? false
            :nominal-verb {:with "lunch"}
            :sem {:pred :have-lunch}
            :exceptions non-aux-exceptions}

           {:sense 7
            :aux? false
            :reflexive? false
            :sem {:pred :be-required-to}

            ;; TODO:
            ;; :prepositional-verb {:with "to"} isn't right here.
            ;; It should be: {:modal :infinitive}
            ;; as with "need" in "need to leave".
            ;; But using :prepositional-verb is a way to get
            ;; it working with no complement, since the lexical rule
            ;; for :prepositional-verb generates such a subcategorization
            ;; with just a single word (in this case "to").
            ;; In order to do the right thing, we need to modify
            ;; the lexical rule for {:modal :infinitive} to
            ;; allow "I need to", "I have to", etc.

            :prepositional-verb {:with "to"}
            :exceptions non-aux-exceptions}])

 "heal" [{ :sem {:pred :heal}}]
 "hear" (let [exceptions [{:infl :past-simple :surface "heard"}
                          {:infl :past-participle :surface "heard"}]]
          [{:exceptions exceptions
            :sem {:pred :hear}}])
 "help" [{ :sem {:pred :help}}]
 "hide" [{:sem {:pred :hide}
          :exceptions [{:infl :past-simple :surface "hid"}
                       {:infl :past-participle :surface "hid"}]}]
 "hit" [{:sem {:pred :hit}
         :exceptions [{:infl :past-simple :surface "hit" :note ["past"]}
                      {:infl :past-participle :surface "hit" :note ["past"]}]}]
 "hope" [{:sense 1
          :intransitive-only? true
          :sem {:pred :hope}}
         {:sense 2
          :sem {:pred :hope}
          :subcat {:2 {:cat :verb
                       :rule "s"}}}
         {:sense 3
          :sem {:pred :hope}
          :subcat {:2 {:cat :comp
                       :rule "comp2"}}}]
 "hug" [{:sem {:pred :hug}}]
 "hurt" (let [exceptions [{:infl :past-simple :surface "hurt"}
                          {:infl :past-participle :surface "hurt"}]]
          [{:sem {:pred :hurt-oneself}
            :reflexive? true
            :exceptions exceptions}])
 "increase" [{:sem {:pred :increase}}]
 "inhibit" [{ :sem {:pred :inhibit}}]
 "insure" [{ :sem {:pred :insure}}]
 "keep" (let [exceptions [{:infl :past-simple :surface "kept"}
                          {:infl :past-participle :surface "kept"}]]
           [{:exceptions exceptions  :sem {:pred :keep}}])
 "know" (let [exceptions [{:infl :past-simple :surface "knew"}
                          {:infl :past-participle :surface "known"}]]
          [{:exceptions exceptions
            :sense 1
            :sem {:pred :know
                  :mental-state? true}}
           {:exceptions exceptions
            :sense 2
            :sem {:pred :know-c
                  :mental-state? true}}
           {:exceptions exceptions
            :sense 3
            :sem {:pred :know-s
                  :mental-state? true}}])
 "laze" [{:sem {:pred :laze}
          :intransitive-only? true}]
 "lead" [{:sem {:pred :lead}
          :exceptions [{:infl :past-simple :surface "led"}
                       {:infl :past-participle :surface "led"}]}]
 "learn" [{:sem {:pred :learn}}] 
 "leave" (let [exceptions [{:infl :past-simple :surface "left"}
                           {:infl :past-participle :surface "left"}]]
           [{:exceptions exceptions :sem {:pred :leave}}
            {:exceptions exceptions :sem {:pred :leave-behind}
             :prepositional-verb {:with "behind"}}])

 "lend" [{:sem {:pred :lend}}]
 "let" (let [exceptions [{:infl :past-simple :surface "let"}
                         {:infl :past-participle :surface "let"}]]
          [{:exceptions exceptions  :sem {:pred :let}}])
 "lie" [{:sem {:pred :lie}}]
 "like" [{:sem {:pred :like
                :mental-state? true}}]
 "linger" [{:sem {:pred :linger}
            :intransitive-only? true}]
 "listen" [{:prepositional-verb {:with "to"}
            :sem {:pred :listen-to}}]
 "live" [{:sem {:pred :live}}]
 "look" [{:intransitive-only? true
         :sem {:pred :look}}
         {:prepositional-verb {:with "at"}
          :sem {:pred :look-at}}
         {:prepositional-verb {:with "for"}
          :sem {:pred :look-for}}
         {:prepositional-verb {:with "up"}
          :sem {:pred :look-up}}]
 "lose" (let [exceptions [{:infl :past-simple :surface "lost"}
                          {:infl :past-participle :surface "lost"}]]
          [{:exceptions exceptions  :sem {:pred :lose}}])
 
 "love" [{:sem {:pred :love
                :mental-state? true}
          :modal :infinitive}]
 "lower" [{:sem {:pred :lower}}]
 "make" (let [exceptions [{:infl :past-simple :surface "made"}
                          {:infl :past-participle :surface "made"}]]
           [{:exceptions exceptions  :sem {:pred :make}}])
 "may" [{:modal :base
         :infl :present
         :sem {:pred :be-allowed-to
               :shared? false}}]
 "mean" (let [exceptions [{:infl :past-simple :surface "meant"}
                          {:infl :past-participle :surface "meant"}]]
          [{:exceptions exceptions  :sem {:pred :mean}}])
 "move" [{:sem {:pred :move}}]

 "must" [{:infl :present
          :inflected? true
          :sem {:pred :be-required-to
                :shared? false}}]

 "offer" [{:sem {:pred :offer}}]
 "organize" [{:sem {:pred :organize}}]
 "overcome" (let [exceptions [{:infl :past-simple :surface "overcame"}
                              {:infl :past-participle :surface "overcame"}]]
              [{:exceptions exceptions
                :sem {:pred :overcome}}])
 "overwhelm" [{:sem {:pred :overwhelm}}]
 "name" [{:sem {:pred :name}}]
 "need" [;; need to leave
         {:sense 1
          :sem {:pred :need}
          :modal :infinitive}
         ;; need some money
         {:sense 2
          :sem {:pred :need}
          :modal :none}]
 "paint" [{:sem {:pred :paint}}]
 "pay" [{:sem {:pred :pay}
         :exceptions [{:infl :past-simple :surface "paid"}
                      {:infl :past-participle :surface "paid"}]}]
 "perform" [{ :sem {:pred :perform}}]
 "play" [{ :sem {:pred :play}}]
 "preserve" [{:sem {:pred :preserve}}]

 ;; TODO: add :obj as obligatory
 ;; "I prevent it" but
 ;; "*I prevent"
 "prevent" [{ :sem {:pred :prevent}}]

 ;; TODO: rewrite after better lexical support for ditransitive verbs (similar to what
 ;; was done for {:prepositional-verb {:with "X"}.
 "put" (let [exceptions [{:infl :past-simple :surface "put"}
                         {:infl :past-participle :surface "put"}]]
         [{:exceptions exceptions
           :intransitive-only? true
           :sem {:pred :put}}
          {:exceptions exceptions
           :ditransitive? true           
           :subcat {:2 {:cat :prep
                        :sem {:pred :on}}
                    :3 {:cat :noun}}
           :sem {:pred :put-on}}
          {:exceptions exceptions
           :ditransitive? true
           :subcat {:2 {:cat :prep
                        :sem {:pred :in}}
                    :3 {:cat :noun}}
           :sem {:pred :put-in}}])

 "read" (let [exceptions [{:infl :past-simple :surface "read" :note ["past"]}
                          {:infl :past-participle :surface "read" :note ["past"]}]]
          [{:exceptions exceptions  :sem {:pred :read}}])
 "realize" [{:sem {:pred :realize}}]
 "remain" [{:sem {:pred :remain}}]
 "remove" [{:sem {:pred :remove}}]
 "repair" [{:sem {:pred :repair}}] 
 "respond" [{:sem {:pred :respond}}]  
 "ruin" [{:sem {:pred :ruin}}]

 "run" (let [exceptions [{:infl :past-simple :surface "ran"}
                         {:infl :past-participle :surface "run"}]]
          [{:exceptions exceptions  :sem {:pred :run}}])
 "sail" [{ :sem {:pred :sail}}]
 "save" [{ :sem {:pred :save}}]
 "say" (let [exceptions [{:infl :past-simple :surface "said"}
                         {:infl :past-participle :surface "said"}]]
         [{:exceptions exceptions
           :sense 1
           :sem {:pred :say}}
           
          {:exceptions exceptions
           :sense 2
           
           :sem {:pred :say}
           :subcat {:2 {:cat :verb
                        :rule "s"}}}
           
          {:exceptions exceptions
           :sense 3
           
           :sem {:pred :say}
           :subcat {:2 {:cat :comp
                        :rule "comp2"}}}])
 "scrub" [{ :sem {:pred :scrub}}]
 "see" (let [exceptions [{:infl :past-simple :surface "saw"}
                         {:infl :past-participle :surface "seen"}]]
         [{:exceptions exceptions
           :sem {:pred :see}}])
 "seem" [{ :sem {:pred :seem}}]

 "send" (let [exceptions [{:infl :past-simple :surface "sent"}
                          {:infl :past-participle :surface "sent"}]]
          [{:exceptions exceptions  :sem {:pred :send}}])
 "share" [{ :sem {:pred :share}}]
 "show" [{ :sem {:pred :show}}]
 "sign" [{ :sem {:pred :sign}}]
 "sing" (let [exceptions [{:infl :past-simple :surface "sang"}
                          {:infl :past-participle :surface "sung"}]]
          [{:exceptions exceptions  :sem {:pred :sing}}])
 "sit" (let [exceptions [{:infl :past-simple :surface "sat"}
                         {:infl :past-participle :surface "sat"}]]
         [{:exceptions exceptions
           :sem {:pred :sit}}])
 "sleep" (let [exceptions [{:infl :past-simple :surface "slept"}
                           {:infl :past-participle :surface "slept"}]]
           [{:exceptions exceptions
             :intransitive-only? true
             :sem {:pred :sleep
                   :subj {:prop {:animate true}} ;; TODO: move to encyclopedia.
                   :obj :none}}])
 "smoke" [{ :sem {:pred :smoke}}]
 "speak" (let [exceptions [{:infl :past-simple
                           :surface "spoke"}
                           {:infl :past-participle
                           :surface "spoken"}]]
           [{:sem {:pred :speak}
             :exceptions exceptions}])
 "spell" [{:sem {:pred :spell}}]
 "spend" [{:sem {:pred :spend}
           :exceptions [{:infl :past-simple
                         :surface "spent"}
                        {:infl :past-participle
                         :surface "spent"}]}]
 "sneeze" [{:sem {:pred :sneeze}}]
 "stand" (let [exceptions [{:infl :past-simple :surface "stood"}
                           {:infl :past-participle :surface "stood"}]]
           [{:exceptions exceptions
             :sem {:pred :stand}}])

 "start" [{:sem {:pred :start} :subcat {:1 :top :2 :top}}]
 "stay" [{:sem {:pred :stay}}]
 "step" [{:sem {:pred :step}}]
 "stop" [{:sem {:pred :stop}}
         {:sem {:pred :stop-oneself}
          :reflexive? true}]
 "strike" [{:sem {:pred :strike}
            :exceptions [{:infl :past-simple :surface "struck"}
                         {:infl :past-participle :surface "struck"}]}]
 "study" [{:sem {:pred :study}}]
 "succeed" [{:sem {:pred :succeed}}]
 "swim" [{:sem {:pred :swim}
          :exceptions [{:infl :past-simple :surface "swam"}
                       {:infl :past-participle :surface "swum"}]}]
 "support" [{:sem {:pred :support}}]
 "take" (let [exceptions [{:infl :past-simple :surface "took"}
                          {:infl :past-participle :surface "taken"}]]
          [{ :sem {:pred :take}
            :exceptions exceptions}])
 "talk" [{:sem {:pred :talk}}
         {:sem {:pred :talk}
          :subcat {:1 :top
                   :2 {:cat :prep
                       :sem {:pred :to}}
                   :3 []}}]
 "teach" (let [exceptions [{:infl :past-simple :surface "taught"}
                           {:infl :past-participle :surface "taught"}]]
           [{:exceptions exceptions  :sem {:pred :teach}}])
 "telephone" [{:sem {:pred :telephone}}]
 "tell" (let [exceptions [{:infl :past-simple :surface "told"}
                          {:infl :past-participle :surface "told"}]]
          [{:exceptions exceptions
             :sem {:pred :tell}}])
 "think" (let [exceptions [{:infl :past-simple :surface "thought"}
                           {:infl :past-participle :surface "thought"}]]
           [{:sense 1
             :exceptions exceptions
             :sem {:pred :think}}

            ;; "think that you will see the cat"
            {:sense 2
             :exceptions exceptions
             :sem {:pred :think}
             :subcat {:2 {:cat :verb
                          :rule "s"}}}

            ;; "think that you will see the cat"
            {:sense 3
             :exceptions exceptions
             
             :sem {:pred :think}
             :subcat {:2 {:cat :comp
                          :rule "comp2"}}}])

            ;; TODO: "the cat they think that you will see"

 "throw" (let [exceptions [{:infl :past-simple
                            :surface "threw"}
                           {:infl :past-participle
                            :surface "thrown"}]]
           [{:sem {:pred :throw}
             :exceptions exceptions}

            {:sem {:pred :throw-out}
             :prepositional-verb {:with "out"}
             :exceptions exceptions}])
 
 "to" ;; to (in "she is able to"), "to sleep", "to see them"
 [(let [subj (atom :top)
        sem (atom {:subj subj})
        agr (atom :top)
        reflexive? (atom :top)]
    ;; to sleep
    {:agr agr
     :sense :v1
     :inflected? true
     :modal :infinitive
     :infl :infinitive
     :reflexive? reflexive?
     :sem sem
     :subcat {:1 {:cat :noun
                  :sem subj}
              :2 {:cat :verb
                  :reflexive? reflexive?
                  :to? false
                  :agr agr
                  :sem sem
                  :infl :base
                  :modal :none
                  :aux? false
                  :subcat {:1 {:cat :noun
                               :sem subj}
                           :2 []}}}
     :to? true})

  ;; to be able
  (let [subj (atom :top)
        sem (atom {:subj subj})
        agr (atom :top)
        reflexive? (atom :top)]
    {:agr agr
     :sense :v2
     :inflected? true
     :infl :infinitive
     :reflexive? reflexive?
     :sem sem
     :subcat {:1 {:cat :noun
                  :sem subj}
              :2 {:cat :verb
                  :to? false
                  :agr agr
                  :sem sem
                  :infl :base
                  :modal :adjective
                  :aux? false
                  :reflexive? reflexive?                  
                  :subcat {:1 {:cat :noun
                               :sem subj}
                           :2 []}}}
     :to? true})

  ;; to want
  (let [subj (atom :top)
        sem (atom {:subj subj})
        agr (atom :top)
        reflexive? (atom :top)]
    {:agr agr
     :sense :v3
     :inflected? true
     :infl :infinitive
     :reflexive? reflexive?
     :sem sem
     :subcat {:1 {:cat :noun
                  :sem subj}
              :2 {:cat :verb
                  :to? false
                  :agr agr
                  :reflexive? reflexive?                  
                  :sem sem
                  :modal :infinitive
                  :aux? false
                  :subcat {:1 {:cat :noun
                               :sem subj}
                           :2 []}}}
     :to? true})]
 "try" [{:sem {:pred :try}
         :modal :infinitive}]
 "turn" [{:prepositional-verb {:with "on"}
          :sem {:pred :turn-on}}
         {:prepositional-verb {:with "off"}
          :sem {:pred :turn-off}}]
 "understand" [{:sem {:pred :understand}
                :exceptions [{:infl :past-simple :surface "understood"}
                             {:infl :past-participle :surface "understood"}]}]
 "use" [{:sem {:pred :use}}]

 ;; e.g. "I used to go there"
 "used" [{:aux? true
          :infl :past-simple
          :inflected? true
          :exception? true
          :modal :infinitive
          :sem {:tense :past
                :aspect :progressive}
          :used-to? true}]

 "wake" [{:prepositional-verb {:with "up"}
          :sem {:pred :wake-up}}]

 "walk" [{:sem {:pred :walk}}
         {:sem {:pred :walk-c}}]
 "want" [{:sem {:pred :want
                :mental-state? true}
          :modal :infinitive}]
 "warn" [{:sem {:pred :warn}}]
 "wash" [{:sem {:pred :wash}}
         {:sem {:pred :wash-oneself}
          :reflexive? true}]
         
 "wear" (let [exceptions [{:infl :past-simple :surface "wore"}
                          {:infl :past-participle :surface "wore"}]]
          [{:sem {:pred :wear}
            :exceptions exceptions}
           {:sem {:pred :wear-l}
            :exceptions exceptions}])

 "worry" [{:sem {:pred :worry}}]
 "whisper" [{ :sem {:pred :whisper}}]

 ;; TODO: using "will" as an example of using
 ;; a single lexeme and deriving all 4 aux-senses:
 ;; {intrans,trans} x {decl,interog} = {intrans + decl, intrans + interog, trans + decl, trans + interog}
 "will" [{:infl :base
          :modal :base
          :sem {:tense :future}}]

 "win" [{:sem {:pred :win}
          :exceptions [{:infl :past-simple :surface "won"}
                       {:infl :past-participle :surface "won"}]}]
 ;; TODO: be, can, do, may, should, will, would: all these
 ;; can be the X in "[s-interog +X .[s-comp .noun +verb]]":
 ;; generalize with a lexical rule. See above related TODO about "will".
 "would" [{:sem {:tense :conditional}
           :modal :base
           :infl :base}]
 "wound" [{ :sem {:pred :wound}}]
 "work" [{:sem {:pred :work
                :subj {:ref {:human? true}}}}
         {:sem {:pred :work-nonhuman
                :subj {:ref {:human? false}}}}]
 "write" [{:sem {:pred :write}
           :exception [{:infl :past-simple
                        :surface "wrote"}
                       {:infl :past-participle
                        :surface "wrote"}]}]
 "yawn" [{:sem {:pred :yawn}
          :intransitive-only? true}]}


