[
 {:rule :unset-cat
  :if {:cat ::unspec}
  :then [{:cat :unset}]}

 {:rule :canonical-equals-root
  :if :top
  :then [(let [canonical (atom :top)]
           {:canonical canonical
            :root canonical})]}

 ;; <verb rules>
 {:rule :stems?
  :if {:cat :verb
       :stems ::unspec}
  :then [{:stems {:boot? false
                  :futuro? false
                  :preterito? false}}]}

 {:rule :boot-stem?
  :if {:cat :verb
       :stems? true
       :stems {:boot ::unspec}}
  :then [{:stems {:boot? false}}]}

 {:rule :futuro-stem?
  :if {:cat :verb
       :stems? true
       :stems {:futuro ::unspec}}
  :then [{:stems {:futuro? false}}]}

 {:rule :preterito-stem?
  :if {:cat :verb
       :stems? true
       :stems {:preterito ::unspec}}
  :then [{:stems {:preterito? false}}]}

 {:rule :boot-stem-er-or-ir
  :if {:cat :verb
       :stems {:boot? true}
       :canonical #"(.*)[ei]r(se)?$"}
  :then [{:exceptions [;; 1st, 2nd and 3rd plural:
                       {:infl :present
                        :agr {:person :1st
                              :number :sing}
                        :surface {:prefix [:stems :boot]
                                  :suffix "o"}}
                       {:infl :present
                        :agr {:person :2nd
                              :number :sing
                              :formal? false}
                        :surface {:prefix [:stems :boot]
                                  :suffix "es"}}
                       {:infl :present
                        :agr {:person :2nd
                              :number :sing
                              :formal? true}
                        :surface {:prefix [:stems :boot]
                                  :suffix "e"}}
                       {:infl :present
                        :agr {:person :3rd
                              :number :sing}
                        :surface {:prefix [:stems :boot]
                                  :suffix "e"}}
                        ;; (1st and 2nd plur informal are conjugated according
                        ;; to the regular rules, so no :exception needed for them).

                       ;; 2nd person plural formal (ustedes)
                       {:infl :present
                        :agr {:person :2nd
                              :number :plur
                              :formal? true}
                        :surface {:prefix [:stems :boot]
                                  :suffix "en"}}
                       ;; 3rd plur:
                       {:infl :present
                        :agr {:person :3rd :number :plur}
                        :surface {:prefix [:stems :boot]
                                  :suffix "en"}}]}]}

 {:rule :boot-stem-ar
  :if {:cat :verb
       :stems {:boot? true}
       :canonical #"(.*)ar(se)?$"}
  :then [{:exceptions [;; 1st, 2nd and 3rd plural:
                       {:infl :present
                        :agr {:person :1st
                              :number :sing}
                        :surface {:prefix [:stems :boot]
                                  :suffix "o"}}
                       {:infl :present
                        :agr {:person :2nd
                              :number :sing
                              :formal? false}
                        :surface {:prefix [:stems :boot]
                                  :suffix "as"}}
                       {:infl :present
                        :agr {:person :2nd
                              :number :sing
                              :formal? true}
                        :surface {:prefix [:stems :boot]
                                  :suffix "a"}}
                       {:infl :present
                        :agr {:person :3rd
                              :number :sing}
                        :surface {:prefix [:stems :boot]
                                  :suffix "a"}}
                        ;; (1st and 2nd plur informal are conjugated according
                        ;; to the regular rules, so no :exception needed for them).

                       ;; 2nd person plural formal (ustedes)
                       {:infl :present
                        :agr {:person :2nd
                              :number :plur
                              :formal? true}
                        :surface {:prefix [:stems :boot]
                                  :suffix "an"}}
                       ;; 3rd plur:
                       {:infl :present
                        :agr {:person :3rd :number :plur}
                        :surface {:prefix [:stems :boot]
                                  :suffix "an"}}]}]}

 {:rule :future-and-conditional-stem
  :if {:cat :verb
       :stems {:futuro? true}}
  :then [{:exceptions [{:infl :future
                        :agr {:person :1st
                              :number :sing}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "é"}}
                       {:infl :future
                        :agr {:person :2nd
                              :number :sing
                              :formal? false}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ás"}}
                       {:infl :future
                        :agr {:person :2nd
                              :number :sing
                              :formal? true}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "á"}}
                       {:infl :future
                        :agr {:person :3rd
                              :number :sing}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "á"}}
                       {:infl :future
                        :agr {:person :1st
                              :number :plur}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "emos"}}
                       {:infl :future
                        :agr {:person :2nd
                              :number :plur
                              :formal? false}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "éis"}}
                       {:infl :future
                        :agr {:person :2nd
                              :number :plur
                              :formal? true}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "án"}}
                       {:infl :future
                        :agr {:person :3rd
                              :number :plur}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "án"}}
                       ;; conditional
                       {:infl :conditional
                        :agr {:person :1st
                              :number :sing}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ía"}}
                       {:infl :conditional
                        :agr {:person :2nd
                              :number :sing}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ías"}}
                       {:infl :conditional
                        :agr {:person :3rd
                              :number :sing
                              :formal? false}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ía"}}
                       {:infl :conditional
                        :agr {:person :3rd
                              :number :sing
                              :formal? true}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ía"}}
                       {:infl :conditional
                        :agr {:person :1st
                              :number :plur}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "íamos"}}
                       {:infl :conditional
                        :agr {:person :2nd
                              :number :plur
                              :formal? false}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "íais"}}
                       {:infl :conditional
                        :agr {:person :2nd
                              :number :plur
                              :formal? true}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ían"}}
                       {:infl :conditional
                        :agr {:person :3rd
                              :number :plur}
                        :surface {:prefix [:stems :futuro]
                                  :suffix "ían"}}]}]}

 {:rule :preterito-stem
  :if {:cat :verb
       :stems {:preterito? true}}
  :then [{:exceptions [{:infl :preterito
                        :agr {:person :1st
                              :number :sing}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "e"}}
                       {:infl :preterito
                        :agr {:person :2nd
                              :number :sing
                              :formal? false}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "iste"}}
                       {:infl :preterito
                        :agr {:person :2nd
                              :number :sing
                              :formal? true}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "o"}}
                       {:infl :preterito
                        :agr {:person :3rd
                              :number :sing}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "o"}}
                       {:infl :preterito
                        :agr {:person :1st
                              :number :plur}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "imos"}}
                       {:infl :preterito
                        :agr {:person :2nd
                              :number :plur
                              :formal? false}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "isteis"}}
                       {:infl :preterito
                        :agr {:person :2nd
                              :number :plur
                              :formal? true}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "ieron"}}
                       {:infl :preterito
                        :agr {:person :3rd
                              :number :plur}
                        :surface {:prefix [:stems :preterito]
                                  :suffix "ieron"}}]}]}

 {:rule :reflexive-true
  :if {:cat :verb
       :canonical #"(.*)se$"}
  :then [{:reflexive? true}]}

 {:rule :reflexive-false
  :if {:cat :verb
       :reflexive? ::unspec}
  :then [{:reflexive? false}]}
 
 {:rule :non-reflexive
  :if {:cat :verb
       :aux? false
       :canonical #"(.*)r$"}
  :then [{:reflexive? false}]}

 {:rule :transitivity-frame-default
  :if {:cat :verb
       :transitivity-frame ::unspec}
  :then [{:transitivity-frame :none}]}

 {:rule :transitivity-frame-1
  :if {:cat :verb
       :transitivity-frame :human-subj-nonhuman-obj}
  :then [{:transitivity :intransitive}
         {:transitivity :transitive
          :sem {:subj {:ref {:human? true}}
                :obj {:ref {:human? false}}}}]}
 
 {:rule :reflexive-transtivity-default
  :if {:cat :verb
       :aux? false
       :reflexive? true
       :transitivity ::unspec}
  :then [{:transitivity :intransitive}]}
 
 {:rule :reflexive-intransitive
  :if {:cat :verb
       :aux? false
       :reflexive? true
       :transitivity :intransitive}
  :then (let [agr (atom :top)
              ref (atom :top)
              subj (atom {:ref ref})
              obj (atom {:ref ref})]
          ;; variant with explicit subject e.g. "él se levantó" and no object
          [{:reflexive? true
            :sem {:subj subj
                  :obj :none}
            :agr agr
            :subcat {:1 {:agr agr
                         :sem subj
                         :reflexive? false}
                     :2 {:pronoun? true
                         :cat :noun
                         :agr agr
                         :sem {:ref ref}
                         :reflexive? true}
                     :3 []}}

           ;; variant without explicit subject e.g. "se levantó" and no object
           {:reflexive? true
            :sem {:subj subj
                  :obj :none}
            :agr agr
            :subcat {:1 {:pronoun? true
                         :cat :noun
                         :case :acc
                         :agr agr
                         :sem subj
                         :reflexive? true}
                     :2 []
                     :3 []}}])}

 {:rule :reflexive-transitive
  :if {:cat :verb
       :aux? false
       :reflexive? true
       :transitivity :transitive}
  :then (let [agr (atom :top)
              ref (atom :top)
              subj (atom {:ref ref})
              obj (atom {:ref ref})]
          [;; variant with explicit subject e.g. "él se levantó" and object
           {:reflexive? true
            :sem {:subj subj
                  :obj obj}
            :agr agr
            :subcat {:1 {:agr agr
                         :sem subj
                         :reflexive? false}
                     :2 {:pronoun? true
                         :cat :noun
                         :agr agr
                         :sem obj
                         :reflexive? true}
                     :3 []}}

           ;; variant without explicit subject e.g. "se levantó" and object
           {:reflexive? true
            :sem {:subj subj
                  :obj subj}
            :agr agr
            :subcat {:1 {:pronoun? true
                         :cat :noun
                         :case :acc
                         :agr agr
                         :sem subj
                         :reflexive? true}
                     :2 []
                     :3 []}}])}
 
 {:rule :aux-default
  :if {:cat :verb
       :aux? ::unspec}
  :then [{:aux? false}]}

 {:rule :subcat-frames-both
  :if {:cat :verb
       :aux? false
       :reflexive? false
       :transitivity ::unspec
       :subcat-frames :both}
  :then [{:transitivity :intransitive}
         {:transitivity :transitive}]}

 {:rule :modal-default-none
  :if {:cat :verb
       :modal ::unspec}
  :then [{:modal :none}]}

 {:rule :subcat-intransitive
  :if {:cat :verb
       :aux? false
       :reflexive? false
       :transitivity :intransitive
       :modal :none}
  :then (let [subj (atom :top)]
          [{:subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj}
                     :2 []
                     :3 []}
            :sem {:subj subj
                  :obj :none}}

           ;; implicit subject
           {:implicit-subject? true
            :subcat []
            :sem {:subj :top
                  :obj :none}}])}

  {:rule :subcat-transitive
  :if {:cat :verb
       :aux? false
       :reflexive? false
       :transitivity :transitive
       :implicit-subject? ::unspec}
  :then [{:implicit-subject? true}
         {:implicit-subject? false}]}

 {:rule :implicit-subject-default
  :if {:cat :verb
       :implicit-subject? ::unspec}
  :then [{:implicit-subject? false}]}

 {:rule :implicit-subject-intransitive
  :if {:cat :verb
       :implicit-subject? true
       :transitivity :intransitive}
  :then [
         ;; enumerate all the possible agreement-subject possibilities:
         {:agr {:person :1st
                :number :sing}
          :sem {:subj {:pred :i}}
          :subcat []}

         {:agr {:person :2nd
                :number :sing}
          :sem {:subj {:pred :you}}
          :subcat []}

         {:agr {:person :3rd
                :gender :masc                
                :number :sing}
          :sem {:subj {:pred :he}}
          :subcat []}

         {:agr {:person :3rd
                :gender :fem
                :number :sing}
          :sem {:subj {:pred :she}}
          :subcat []}

         {:agr {:person :3rd
                :gender :masc                
                :number :sing}
          :sem {:subj {:pred :it}}
          :subcat []}

         {:agr {:person :3rd
                :gender :fem
                :number :sing}
          :sem {:subj {:pred :it}}
          :subcat []}

         {:agr {:person :1st
                :number :plur}
          :sem {:subj {:pred :we}}
          :subcat []}

         {:agr {:person :2nd
                :number :plur}
          :sem {:subj {:pred :you}}
          :subcat []}

         {:agr {:person :3rd
                :gender :masc                
                :number :plur}
          :sem {:subj {:pred :they}}
          :subcat []}

         {:agr {:person :3rd
                :gender :fem
                :number :sing}
          :sem {:subj {:pred :they}}
          :subcat []}]}

  {:rule :implicit-subject-transitive
  :if {:cat :verb
       :implicit-subject? true
       :transitivity :transitive}
  :then [
         ;; enumerate all the possible agreement-subject possibilities:
         ;; singular:
         ;;   implicit 1st person subject, 2nd person object:
         (let [obj (atom :top)]
           {:agr {:person :1st
                  :number :sing}
            :sem {:subj {:pred :i}
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :2nd}}
                     :2 []
                     :3 []}})
         ;;   implicit 1st person subject, 3rd person object:
         (let [obj (atom :top)]
           {:agr {:person :1st
                  :number :sing}
            :sem {:subj {:pred :i}
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :3rd}}
                     :2 []
                     :3 []}})

         ;; TODO: all the other subject-object possibilities
         ]}

 ;; TODO: do implicit subject for :modal :infinitive: (take into account implicit-subject? true/false)
 ;; or incorporate it in the already-existing implicit subject-handling in the above rules.
 {:rule :subcat-intransitive-modal
  :if {:cat :verb
       :modal :infinitive
       :transitivity :intransitive}
  :then (let [subj (atom :top)]
          [{:subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj}
                     :2 []
                     :3 []}
            :sem {:subj subj
                  :obj {:pred :anaphoric}}}])}
 
 ;; transitive, non-reflexive, explicit subject:
 ;; force the subj and obj to be distinct,
 ;; so that semantic transfer to reflexive
 ;; cannot happen:
 {:rule :transitive-explicit-subject
  :if {:cat :verb
       :aux? false
       :reflexive? false
       :transitivity :transitive
       :implicit-subject? false}
  :then (let [subj (atom {:ref {:a 1}})
              obj (atom {:ref {:a 2}})]
          [{:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj
                         :agr {:person :1st}}
                     :2 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :2nd}}
                     :3 []}}
           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj
                         :agr {:person :1st}}
                     :2 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :3rd}}
                     :3 []}}

           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj
                         :agr {:person :2nd}}
                     :2 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :1st}}
                     :3 []}}
           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj
                         :agr {:person :2nd}}
                     :2 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj
                         :agr {:person :3rd}}
                     :3 []}}
           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:cat :noun
                         :reflexive? false
                         :sem subj
                         :agr {:person :3rd}}
                     :2 {:cat :noun
                         :reflexive? false
                         :case :acc
                         :sem obj}
                     :3 []}}])}

 {:rule :object-constraints-default
  :if {:cat :verb
       :object-constraints ::unspec}
  :then [{:object-constraints :none}]}
 
 {:rule :object-constraints
  :if {:cat :verb
       :object-constraints {:top :top}
       :sem {:obj {:top :top}}}
  :then [(let [ref (atom :top)]
           {:sem {:obj {:ref ref}}
            :object-constraints ref})]}
 
 {:rule :subject-verb-agreement
  :if {:cat :verb
       :implicit-subject? false
       :subcat {:1 {:cat :noun}}}
  :then [(let [agr (atom :top)]
           {:agr agr
            :subcat {:1 {:agr agr
                         :cat :noun
                         :subcat []}}})]}

 {:rule :subcat-1-defaults-to-nom-if-not-reflexive
  :if {:cat :verb
       :implicit-subject? false
       :subcat {:1 {:cat :noun
                    :case ::unspecified
                    :reflexive? false}}}
  :then [{:subcat {:1 {:case :nom}}}]}

 {:rule :subcat-1-nouns-have-an-empty-subcat
  :if {:cat :verb
       :subcat {:1 {:cat :noun}}}
  :then [{:subcat {:1 {:subcat []}}}]}

 {:rule :subcat-2-nouns-have-an-empty-subcat
  :if {:cat :verb
       :subcat {:2 {:cat :noun}}}
  :then [{:subcat {:2 {:subcat []}}}]}

 {:rule :subcat-3-nouns-have-an-empty-subcat
  :if {:cat :verb
       :subcat {:3 {:cat :noun}}}
  :then [{:subcat {:3 {:subcat []}}}]}
 
 {:rule :existential-false-pronouns
  :if {:cat :noun
       :pronoun? true
       :sem {:existential? ::unspec}}
   :then [{:sem {:existential? false}}]}

 {:rule :existential-false-propernouns
  :if {:cat :noun
       :propernoun? true
       :sem {:existential? ::unspec}}
   :then [{:sem {:existential? false}}]}

 {:rule :verbs-have-empty-sem-modifiers
  :if {:cat :verb
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :verb-subject-defaults-to-human
  :if {:cat :verb
       :sem {:subj {:ref {:human? ::unspec}}}}
  :then [{:sem {:subj {:ref {:human? true}}}}]}
 ;; </verb rules>
 
 ;; <noun rules>
 {:rule :propernoun-misc-defaults
  :if {:cat :noun
       :pronoun? false
       :propernoun? true}
  :then [{:interogative? false
          :reflexive? false}]}

 {:rule :propernoun-subcat-default
  :if {:cat :noun
       :propernoun? true
       :subcat ::unspec}
  :then [{:subcat []}]}

 {:rule :propernoun-sem-mod-default
  :if {:cat :noun
       :propernoun? true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}
 
 {:rule :propernoun-person-default
  :if {:cat :noun
       :propernoun? true
       :agr {:person ::unspec}}
  :then [{:agr {:person :3rd}}]}

  {:rule :propernoun-number-default
  :if {:cat :noun
       :propernoun? true
       :agr {:number ::unspec}}
  :then [{:agr {:number :sing}}]}

 {:rule :is-el-noun
  :if {:cat :det
       :agr {:number :sing}
       :is-el-noun? ::unspec}
  :then [{:is-el-noun? false}]}

 {:rule :common-noun
  :if {:cat :noun
       :propernoun? false
       :pronoun? false
       :subcat ::unspec
       :agr {:number ::unspec}}
  :then [(let [agr (atom {:number :sing
                          :person :3rd})]
           ;; "a/the dog sleeps"
           {:cat :noun
            :reflexive? false
            :propernoun? false
            :pronoun? false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         ;; "the/some dogs sleep"
         (let [agr (atom {:number :plur
                          :person :3rd})]
           {:cat :noun
            :reflexive? false
            :propernoun? false
            :pronoun? false
            :agr agr
            :subcat {:1 {:cat :det :agr agr}
                     :2 []}})
         ;; "dogs sleep"
         {:cat :noun
          :reflexive? false
          :propernoun? false
          :pronoun? false
          :sem {:quant :some}
          :agr {:number :plur
                :person :3rd}
          :subcat []}]}

 {:rule :quantified-noun
  :if {:cat :noun
       :subcat {:1 {:cat :det}}}
  :then [(let [quant (atom :top)
               context (atom :top)]
           {:sem {:quant quant
                  :context context}
            :subcat {:1 {:sem {:context context
                               :pred quant}}}})]}

 {:rule :noun-semantics
  :if {:cat :noun}
  :then [(let [number (atom :top)]
           {:agr {:number number}
            :sem {:ref {:number number}}})]}
 
 {:rule :common-noun-1
  :if {:cat :noun
       :pronoun? false
       :propernoun? false
       :subcat {:1 {:top :top}}}
  :then (let [agr (atom :top)]
          [{:agr agr
            :subcat {:1 {:cat :det
                         :agr agr}
                     :2 []}}])}

 {:rule :common-noun-fem-defaults-to-la
  :if {:cat :noun
       :pronoun? false
       :propernoun? false
       :agr {:gender :fem}
       :subcat {:1 {:is-el-noun? ::unspec}}}
  :then [{:subcat {:1 {:is-el-noun? false}}}]}

 {:rule :adjectives-default-to-post-noun
  :if {:cat :adjective
       :modifies-noun ::unspec}
  :then [{:modifies-noun :post}]}

 ;; </noun rules>
 
 ]
