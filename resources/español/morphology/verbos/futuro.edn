;; TODO: mask clojure/core's future to prevent warnings "WARNING: future already refers to: #'clojure.core/future"
(defn future [word & [ {usted :usted
                        vosotros :vosotros
                        ustedes :ustedes}]]
  (let [infinitive (reflexive-to-infinitive (get-in word '(:espanol)))
        ar-type (try (re-find #"ar$" infinitive)
                     (catch Exception e
                       (exception (str "Can't regex-find on non-string: " infinitive " from word: " word))))
        er-type (re-find #"er$" infinitive)
        ir-type (re-find #"ir$" infinitive)
        stem infinitive ;; stem is simply the same as the infinitive for future.
        stem (if (get-in word [:futuro-stem])
               (get-in word [:futuro-stem])
               stem)
        last-stem-char-is-i (re-find #"ir$" infinitive)
        last-stem-char-is-e (re-find #"er$" infinitive)
        is-care-or-gare? (re-find #"[cg]ar$" infinitive)
        vosotros (if vosotros vosotros true)
        ustedes (if ustedes ustedes false)
        person (get-in word '(:agr :person))
        number (get-in word '(:agr :number))]

    (cond
     (get-in word [:futuro number-and-person])
     (get-in word [:futuro number-and-person])

     (and (= person :1st) (= number :sing))
     (str stem "é")

     (and (= person :2nd) (= number :sing))
     (str stem "ás")

     (and (= person :2nd) (= number :sing)(= usted true))
     (str stem "á")

     (and (= person :3rd) (= number :sing))
     (str stem "á")

     (and (= person :1st) (= number :plur))
     (str stem "emos")

     ;; <second person plural future>

     (and (= person :2nd) (= number :plur) vosotros)
     (str stem "éis")

     (and (= person :2nd) (= number :plur) ustedes)
     (str stem "án")

     ;; </second person plural future>

     ;; <third person plural future>
     (and (= person :3rd) (= number :plur))
     (str stem "án")

     ;; </third person plural future>
