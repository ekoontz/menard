(defn regular-preterito [word {usted :usted
                               vosotros :vosotros
                               ustedes :ustedes}]
  (let [infinitive (reflexive-to-infinitive (get-in word '(:espanol)))
        person (get-in word '(:agr :person))
        number (get-in word '(:agr :number))
        ar-type (try (re-find #"ar$" infinitive)
                     (catch Exception e
                       (exception (str "Can't regex-find on non-string: " infinitive " from word: " word))))
        er-type (re-find #"er$" infinitive)
        ir-type (re-find #"ir$" infinitive)

        zar-type (re-find #"zar$" infinitive)

        ;; default stem: will be used except under certain conditions, as described in next check.
        stem (string/replace infinitive #"[iae]r$" "")

        stem (if (get-in word [:preterito-stem])
               (get-in word [:preterito-stem])
               stem)

        stem (if (and zar-type ;; z->c for -zar verbs with 1st person singular.
                      (= person :1st)
                      (= number :sing))
               (string/replace infinitive #"zar$" "c")
               stem)

        last-stem-char-is-i (re-find #"ir$" infinitive)
        last-stem-char-is-e (re-find #"er$" infinitive)
        is-care-or-gare? (re-find #"[cg]ar$" infinitive)
        vosotros (if vosotros vosotros true)
        ustedes (if ustedes ustedes false)]

    (cond
     (and (= person :1st) (= number :sing) ar-type)
     (str stem "é")

     (and (= person :1st) (= number :sing) (or ir-type er-type))
     (str stem "í")

     (and (= person :2nd) (= number :sing) ar-type (= usted false))
     (str stem "aste")

     (and (= person :2nd) (= number :sing) (or ir-type er-type) (= usted false))
     (str stem "iste")

     (and (= person :2nd) (= number :sing) ar-type (= usted true))
     (str stem "ó")

     (and (= person :2nd) (= number :sing) (or ir-type er-type) (= usted true))
     (str stem "ió")

     (and (= person :3rd) (= number :sing) ar-type)
     (str stem "ó")

     (and (= person :3rd) (= number :sing) (or ir-type er-type))
     (str stem "ió")

     (and (= person :1st) (= number :plur) ar-type)
     (str stem "amos")

     (and (= person :1st) (= number :plur) er-type)
     (str stem "imos")

     (and (= person :1st) (= number :plur) ir-type)
     (str stem "imos")

     ;; <second person plural preterite>

     (and (= person :2nd) (= number :plur) ar-type vosotros)
     (str stem "asteis")

     (and (= person :2nd) (= number :plur) er-type vosotros)
     (str stem "isteis")

     (and (= person :2nd) (= number :plur) ir-type vosotros)
     (str stem "isteis")

     (and (= person :2nd) (= number :plur) ar-type ustedes)
     (str stem "aron")

     (and (= person :2nd) (= number :plur) er-type ustedes)
     (str stem "ieron")

     (and (= person :2nd) (= number :plur) ir-type ustedes)
     (str stem "ieron")

     ;; </second person plural preterite>

     ;; <third person plural preterite>
     (and (= person :3rd) (= number :plur)
          ar-type)
     (str stem "aron")
     (and (= person :3rd) (= number :plur)
          er-type)
     (str stem "ieron")
     (and (= person :3rd) (= number :plur)
          ir-type)
     (str stem "ieron")

     ;; </third person plural preterite>
