[{:rule :curriculum-is-none-default
  :if {:curriculum ::none}
  :then [{:curriculum ::none}]}

 {:rule :null-is-false-by-default
  :if {:null? false}
  :then [{:null? false}]}

 {:rule :noun-semantics
  :if {:cat :noun
       :null? false
       :semantic-number-differs-from-agreement-number? false}
  :then [(let [number (atom :top)]
           {:agr {:number number}
            :sem {:ref {:number number}}})]}

 ;; nouns default to 'common' gender ('de X', not 'het X') if gender is not specified.
 {:rule :noun-gender-common-default
  :if {:cat :noun
       :null? false
       :pronoun? false
       :propernoun? false
       :agr {:gender ::unspec}}
  :then [{:agr {:gender :common}}]}

 ;; an adjective in the lexicon has no modifiers
 ;; (i.e. its [:sem :mod] is empty).
 ;; however an adjective might have modifiers
 ;; within a phrase e.g. in "heel klein",
 ;; "klein" is modified by "heel":
 ;;  {:pred :small,
 ;;   :mod {:first {:pred :very}, :rest []},
 ;;   :number? false})
 ;; Note that we set both [:sem :mod] *and* [:mod]
 ;; to empty - this is because an adjective
 ;; might be head of an intensifier phrase
 ;; e.g. 'echt kleine', where we will concatenate
 ;; a :mod for the adjective and then finally, at
 ;; a level when no more intensifiers are added,
 ;; nest this :mod as the parent's [:sem :mod].
 {:rule :adjective-semantics
  :if {:cat :adjective
       :null? false}
  :then [(let [sem (atom {:mod []})]
           {:sem sem
            :mod []})]}

 {:rule :aux-default-is-false
  :if {:cat :verb
       :te? false
       :aux ::unspec}
  :then [{:aux false}]}

 {:rule :separable-is-false
  :if {:cat :verb
       :te? false
       :separable? ::unspec}
  :then [{:separable? false}]}

 {:rule :separable-subcat
  :if {:cat :verb
       :te? false
       :separable? true}
  :then [;; intransitive
         {:reflexive? false
          :sem {:obj :none}
          :subcat {:2 {:cat :prep
                       :phrasal? false
                       :subcat []}
                   :3 []}}
         ;; transitive
         (let [obj (atom :top)]
           {:reflexive? false
            :sem {:obj obj}
            :subcat {:2 {:cat :prep
                         :phrasal? true
                         :sem obj
                         :subcat []}
                     :3 []}})
         ]}
 
 {:rule :dont-inflect-conjunctions
  :if {:cat :conjunction}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-complementizers
  :if {:cat :comp}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-intensifiers
  :if {:cat :intensifier}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-neg
  :if {:cat :neg}
  :then [{:inflected? true}]}
 
 {:rule :dont-inflect-prepositions
  :if {:cat :prep}
  :then [{:inflected? true}]}

 {:rule :dont-inflect-determiners
  :if {:cat :det}
  :then [{:inflected? true}]}

 {:rule :intensifier-semantics
  :if {:cat :intensifier}
  :then [(let [sem (atom {:mod []})]
           {:sem sem
            :mod []})]}

 {:rule :nouns-are-not-pronouns
  :if {:cat :noun
       :null? false
       :pronoun? ::unspec}
  :then [{:pronoun? false}]}

 {:rule :nouns-are-not-propernouns
  :if {:cat :noun
       :null? false
       :propernoun? ::unspec}
  :then [{:propernoun? false}]}

 {:rule :nouns-have-empty-modifiers
  :if {:cat :noun
       :mod ::unspec
       :sem {:mod ::unspec}}
  :then [{:mod []
          :sem {:mod []}}]}

 {:rule :politeness-is-unspecified
  :if {:cat :noun
       :null? false
       :sem {:context ::unspec}}
  :then [{:sem {:context :none}}]}

 {:rule :pronoun-have-empty-modifiers
  :if {:cat :noun
       :null? false
       :pronoun? true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :propernouns-have-empty-modifiers
  :if {:cat :noun
       :null? false
       :pronoun? false
       :propernoun? true
       :sem {:mod ::unspec}}
  :then [{:sem {:mod []}}]}

 {:rule :propernouns-are-nonreflexive
  :if {:cat :noun
       :null? false
       :pronoun? false
       :propernoun? true}
  :then [{:reflexive? false}]}

 {:rule :pronouns-are-nonreflexive
  :if {:cat :noun
       :null? false
       :pronoun? true
       :reflexive? ::unspec
       :propernoun? false}
  :then [{:reflexive? false}]}

 {:rule :adjectives-are-nonreflexive
  :if {:cat :adjective
       :reflexive? ::unspec}
  :then [{:reflexive? false}]}

 {:rule :modal-default-false
  :if {:cat :verb
       :te? false
       :modal ::unspec}
  :then [{:modal false}]}

 ;; if a verb does not specify a particular
 ;; transitivity, generate both intransitive and transitive forms
 ;; of the verb, where the second form has:
 ;; 1. a noun second argument (which must be un-existential).
 {:rule :subcat-unspecified-nonaux
  :if {:cat :verb
       :aux false
       :modal false
       :subcat {:1 {:cat :noun}
                :2 ::unspec}
       :sem {:obj ::unspec}}
  :then [{:derivation {:sense :intransitive}
          :subcat {:1 {:cat :noun
                       :subcat []}}
          :sem {:args :none
                :obj :none}}
         {:derivation {:sense :transitive}
          :subcat {:1 {:cat :noun
                       :subcat []}
                   :2 {:cat :noun
                       :subcat []}}
          :sem {:obj {:existential? false}}}]}

 {:rule :existential-verb?
  :if {:cat :verb
       :separable? false
       :te? false
       :modal false
       :agr {:person :3rd}
       :sem {:subj {:existential? ::unspec}
             :obj :none}}
  :then [;; 1. non-existential, intransitive:
         {:reflexive? false
          :sem {:subj {:existential? false}}
          :subcat {:2 []}
          :derivation {:sense :non-existential}}

         ;; 2. existential, intransitive, e.g.: "er slaapt een hond"
         ;; the 'semantic-subject' is the meaningful subject of the
         ;; verb, e.g. the 'hond' in 'er slaapt een hond', as opposed to the
         ;; merely syntactic subject, 'er'.
         (let [semantic-subject (atom {:existential? false})
               agr (atom :top)]
           {:derivation {:sense :existential}
            :reflexive? false
            :agr agr
            :sem {:subj semantic-subject}
            :subcat {:1 {:cat :noun
                         :pronoun? true
                         :sem {:existential? true}}
                     :2 {:cat :noun
                         :reflexive? false
                         :subcat []
                         :agr agr
                         :sem semantic-subject}
                     :3 []}})]}

 {:rule :existential-default-false
  :if {:cat :verb
       :te? false
       :sem {:subj {:existential? ::unspec}}}
  :then [{:sem {:subj {:existential? false}}}]}
 
 {:rule :subcat-frames-modal-base
  :if {:cat :verb
       :te? false
       :modal :base
       :aux false}
  :then [(let [subj (atom :top)]
           {:sem {:subj subj}
            :subcat {:1 {:sem subj}}})]}

 {:rule :subcat-frames-modal-infinitive
  :if {:cat :verb
       :te? false
       :modal :infinitive
       :aux false}
  :then [(let [subj (atom :top)]
           {:sem {:subj subj}
            :subcat {:1 {:sem subj}}})]}
 
 {:rule :verbs-have-empty-modifiers
  :if {:cat :verb
       :mod ::unspec}
  :then [{:mod []}]}
 
 {:rule :adjectives-not-numbers-by-default
  :if {:cat :adjective
       :null? false
       :sem {:number? ::unspec}}
  :then [{:sem {:number? false}}]}

 {:rule :conjunctions-subcat
  :if {:cat :conjunction}
  :then [(let [cat (atom :top)]
           {:subcat {:1 {:cat cat}
                     :2 {:cat cat}}})]}

 {:rule :possessive-false-by-default
  :if {:cat :det
       :possessive? ::unspec}
  :then [{:possessive? false}]}

 {:rule :dont-inflect-pronouns
  :if {:cat :noun
       :null? false
       :pronoun? true}
  :then [{:inflected? true
          :subcat []}]}

 {:rule :dont-inflect-propernouns
  :if {:cat :noun
       :null? false
       :propernoun? true}
  :then [{:inflected? true
          :subcat []}]}

 {:rule :subject-verb-agreement
  :if {:cat :verb
       :subcat {:1 {:cat :noun}}}
  :then [(let [agr (atom :top)]
           {:agr agr
            :subcat {:1 {:agr agr
                         :cat :noun
                         :case :nom
                         :subcat []}}})]}

 {:rule :subject-is-subcat-1
  :if {:cat :verb
       :subcat {:1 {:cat :noun
                    :sem {:existential? ::unspec}}}}
  :then [(let [person (atom :top)
               subj (atom {:person person})]
           {:agr {:person person}
            :sem {:subj subj}
            :subcat {:1 {:sem subj}}})]}

 {:rule :intransitive-verbs
  :if {:cat :verb
       :aux false
       :modal false
       :sem {:obj :none}
       :subcat {:2 ::unspec}}
  :then [{:reflexive? false
          :subcat {:2 []}}]}

 {:rule :subcat-2-is-acc
  :if {:cat :verb
       :modal false
       :sem {:obj {:top :top}}
       :subcat {:2 {:cat :noun}}}
  :then [{:subcat {:2 {:case :acc}}}]}

 {:rule :subcat-2-is-acc-conj
  :if {:cat :verb
       :modal false
       :sem {:args {:top :top}}
       :subcat {:2 {:cat :conjunction}}}
  :then [{:subcat {:2 {:case :acc}}}]}
 
 {:rule :propernoun-false
  :if {:cat :noun
       :propernoun? ::unspec}
  :then [{:propernoun? false}]}

 {:rule :propernouns-are-3rd-person-singular
  :if {:cat :noun
       :null? false
       :pronoun? false
       :propernoun? true}
  :then [{:agr {:number :sing
                :person :3rd}}]}

 ;; TODO: there are over- and under-
 ;; generation problems with generating the following:
 (comment "test case to cause the cycle: try to generate the following:"
          {:rule "s"
           :head {:rule "vp"
                  :comp {:rule "vp-np"
                         :cat :verb
                         :head {:cat :verb
                                :rule "vp-inf"
                                :comp {:modal :te}}}}})
 {:rule :modal-te
  :if {:cat :verb
       :te? false
       :modal :te}
  :then [;; intransitive: "zij probeert"
         (let [subj (atom :top)
               obj (atom {:subj subj})]
           {:sem {:subj subj
                  :obj :none}
            :reflexive? false
            :subcat {:1 {:sem subj}
                     :2 []}}

           ;; transitive: "zij probeert te zien"
           {:sem {:subj subj
                  :obj obj}
            :subcat {:1 {:subj subj}
                     :2 {:cat :verb
                         :phrasal? true
                         :sem obj
                         :subcat {:2 []}
                         :infl :te}}})]}

 {:rule :modal-false
  :if {:cat :verb
       :modal ::unspec}
  :then [{:modal false}]}
  
 {:rule :modal-infinitive
  :if {:cat :verb
       :modal :infinitive
       :subcat {:2 {:top :top}}}
  :then (let [subj (atom :top)
              obj-with-subject-only (atom {:subj subj
                                           :obj :none})
              obj-with-subject-and-object (atom {:subj subj
                                                 :obj {:top :top}})]
              
          [
           ;; intransitive "ik kan"
           {:derivation {:sense :intransitive}
            :sem {:subj subj
                  :obj :none}
            :subcat {:2 []}}

           ;;  "ik kan fietsen"
           {:derivation {:sense :obj-with-subject-only}
            :sem {:subj subj
                  :obj obj-with-subject-only}
            :subcat {:2 {:aux false
                         :infl :infinitive
                         :cat :verb
                         :modal false
                         :sem obj-with-subject-only
                         :subcat {:1 {:sem subj}}}}}

           ;;  "ik kan het zien"
           {:derivation {:sense :obj-with-subject-and-object}
            :sem {:subj subj
                  :obj obj-with-subject-and-object}
            :subcat {:2 {:aux false
                         :infl :infinitive
                         :cat :verb
                         :modal false
                         :subcat {:1 {:sem subj}}
                         :sem obj-with-subject-and-object}}}])}

 {:rule :ditransitive-false
  :if {:cat :verb
       :te? false
       :subcat {:3 ::unspec}}
  :then [{:cat :verb
          :subcat {:3 []}}]}

 {:rule :possessive-is-definite
  :if {:cat :det
       :possessive? true
       :definite? ::unspec}
  :then [{:definite? true}]}
 
 {:rule :common-nouns-are-countable-by-default
  :if {:cat :noun
       :propernoun? false
       :pronoun? false
       :sem {:countable? ::unspec}
       :subcat true}
  :then [{:sem {:countable? true}}]}
  
 ;; :arg1 and :arg2 are to represent numbers e.g. "vijf en twintig" is represented as:
 ;;    {:arg1 {:times 10 :pred 2}
 ;;     :arg2 {:times 1 :pred 5}}
 {:rule :common-noun-uncountable
  :if {:cat :noun
       :propernoun? false
       :pronoun? false
       :sem {:countable? false}
       :subcat ::unspec}
  :then [(let [agr (atom {:person :3rd
                          :number :sing})
               countable? (atom :top)
               quant (atom :top)
               arg1 (atom :top)
               arg2 (atom :top)]
           {:cat :noun
            :reflexive? false
            :inflection :null
            :agr agr
            :sem {:quant quant
                  :countable? countable?
                  :arg1 arg1
                  :arg2 arg2}
            :subcat {:1 {:cat :det
                         :agr agr
                         :sem {:countable? countable?
                               :arg1 arg1
                               :arg2 arg2
                               :pred quant}}
                     :2 []}})]}
 
 {:rule :common-noun-countable
  :if {:cat :noun
       :propernoun? false
       :pronoun? false
       :sem {:countable? true}
       :subcat ::unspec}
  :then [(let [agr (atom {:person :3rd})
               countable? (atom :top)
               quant (atom :top)
               arg1 (atom :top)
               arg2 (atom :top)]
           {:cat :noun
            :reflexive? false
            :agr agr
            :sem {:quant quant
                  :countable? countable?
                  :arg1 arg1
                  :arg2 arg2}
            :subcat {:1 {:cat :det
                         :agr agr
                         :sem {:countable? countable?
                               :arg1 arg1
                               :arg2 arg2
                               :pred quant}}
                     :2 []}})
         {:cat :noun
          :reflexive? false
          :agr {:number :plur
                :person :3rd}
          :sem {:quant :some}
          :subcat []}]}

 {:rule :verbs-infinitive
  :if {:cat :verb
       :infl ::unspec}
  :then [{:finite? false
          :infl :infinitive}
         {:finite? true}]}

 {:rule :verbs-enumerate-person
  :if {:cat :verb
       :subcat {:1 {:agr {:person ::unspec
                          :number ::unspec}}}
       :te? false}
  :then [{:subcat {:1 {:agr {:person :1st}}}}
         {:subcat {:1 {:agr {:person :2nd}}}}
         {:subcat {:1 {:agr {:person :3rd}}}}]}

 {:rule :verbs-enumerate-subject-agreement-singular
  :if {:cat :verb
       :subcat {:1 {:agr {:person ::unspec
                          :number :sing}}}
       :te? false}
  :then [{:subcat {:1 {:agr {:person :1st
                             :number :sing}}}}
         {:subcat {:1 {:agr {:person :2nd
                             :number :sing}}}}
         {:subcat {:1 {:agr {:person :3rd
                             :number :sing}}}}]}

 {:rule :verbs-enumerate-subject-agreement-plural
  :if {:cat :verb
       :subcat {:1 {:agr {:person ::unspec
                          :number :plur}}}
       :te? false}
  :then [{:subcat {:1 {:agr {:person :1st
                             :number :plur}}}}
         {:subcat {:1 {:agr {:person :2nd
                             :number :plur}}}}
         {:subcat {:1 {:agr {:person :3rd
                             :number :plur}}}}]}

 {:rule :transitive-verbs-reflexive-and-non-reflexive
  :if {:cat :verb
       :reflexive? ::unspec
       :sem {:obj {:top :top}}
       :subcat {:2 {:cat :noun}}}
  :then [;; reflexive: subject and object are the same semantically and by agreement.
         (let [ref (atom :top)
               subj (atom {:ref ref
                           :existential? false})
               obj (atom {:ref ref})]
           {:reflexive? true
            :sem {:subj subj
                  :obj obj}
            :subcat {:1 {:sem subj}
                     :2 {:case :acc
                         :reflexive? true
                         :sem obj
                         :subcat []}}})

         ;; non-reflexive: subject and object are distinct and unrelated grammatically:
         (let [subj (atom {:existential? false
                           :ref {:subj? true}})
               obj (atom {:ref {:subj? false}})]
           {:reflexive? false
            :sem {:subj subj
                  :obj obj}
            :subcat {:1 {:sem subj}
                     :2 {:case :acc
                         :reflexive? false
                         :sem obj
                         :subcat []}}})]}

 {:rule :transitive-verbs-1st-reflexive
  :if {:cat :verb
       :reflexive? true
       :subcat {:1 {:agr {:person :1st}}
                :2 {:cat :noun}}
       :sem {:subj {:existential? false}
             :obj {:top :top}}}
  :then [(let [ref (atom :top)
               agr (atom {:person :1st})]
           {:sem {:subj {:ref ref}
                  :obj {:ref ref}}
            :subcat {:1 {:agr agr}
                     :2 {:agr agr
                         :reflexive? true}}})]}

 {:rule :transitive-verbs-2nd-reflexive
  :if {:cat :verb
       :reflexive? true
       :subcat {:1 {:agr {:person :2nd}}
                :2 {:cat :noun}}
       :sem {:subj {:existential? false}
             :obj {:top :top}}}
  :then [(let [ref (atom :top)
               agr (atom {:person :2nd})]
           {:sem {:subj {:ref ref}
                  :obj {:ref ref}}
            :subcat {:1 {:agr agr}
                     :2 {:agr agr
                         :reflexive? true}}})]}

 {:rule :transitive-verbs-3rd-reflexive
  :if {:cat :verb
       :reflexive? true
       :subcat {:1 {:agr {:person :3rd}}
                :2 {:cat :noun}}
       :sem {:subj {:existential? false}
             :obj {:top :top}}}
  :then [(let [ref (atom :top)
               agr (atom {:person :3rd})]
           {:sem {:subj {:ref ref}
                  :obj {:ref ref}}
            :subcat {:1 {:agr agr}
                     :2 {:agr agr
                         :reflexive? true}}})]}

 {:rule :transitive-verbs-1st-non-reflexive
  :if {:cat :verb
       :reflexive? false
       :sem {:obj {:top :top}}
       :subcat {:1 {:agr {:person :1st}}
                :2 {:cat :noun
                    :agr ::unspec}}}
  :then [{:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :1st}}
                   :2 {:agr {:person :2nd}
                       :reflexive? false}}}
         {:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :1st}}
                   :2 {:agr {:person :3rd}
                       :reflexive? false}}}]}

 {:rule :transitive-verbs-2nd-non-reflexive
  :if {:cat :verb
       :reflexive? false
       :sem {:obj {:top :top}}
       :subcat {:1 {:agr {:person :2nd}}
                :2 {:cat :noun
                    :agr ::unspec}}}
  :then [{:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :2nd}}
                   :2 {:agr {:person :1st}
                       :reflexive? false}}}
         {:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :2nd}}
                   :2 {:agr {:person :3rd}
                       :reflexive? false}}}]}
 
 {:rule :transitive-verbs-3rd-non-reflexive
  :if {:cat :verb
       :reflexive? false
       :sem {:obj {:top :top}}
       :subcat {:1 {:agr {:person :3rd}}
                :2 {:cat :noun
                    :agr ::unspec}}}
  :then [{:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :3rd}}
                   :2 {:agr {:person :1st}
                       :reflexive? false}}}
         {:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :3rd}}
                   :2 {:agr {:person :2nd}
                       :reflexive? false}}}
         {:sem {:subj {:ref {:subj? true}}
                :obj {:ref {:subj? false}}}
          :subcat {:1 {:agr {:person :3rd}}
                   :2 {:agr {:person :3rd}
                       :reflexive? false}}}]}
 
 {:rule :second-arg-is-cat-noun
  :if {:cat :verb
       :separable? false
       :te? false
       :modal false
       :sem {:obj {:top :top}}
       :subcat {:2 {:cat ::unspec}}}
  :then [{:subcat {:2 {:cat :noun}}}]}

 {:rule :prep-arg-verbs ;; "talks" in "she talks to him"
  :if {:cat :verb
       :separable? false
       :sem {:obj {:top :top}}
       :subcat {:2 {:cat :prep}
                :3 []}}
  :then [(let [iobj (atom :top)]
           {:sem {:iobj iobj}
            :subcat {:2 {:cat :prep
                         :sem {:obj iobj}}}})]}

 {:rule :ditransitive-verbs ;; "gives" in "she gives it to her"
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 {:cat :noun}}}
  :then [(let [iobj (atom :top)
               obj (atom :top)]
           {:sem {:iobj iobj
                  :obj obj}
            :subcat {:2 {:cat :prep
                         :sem {:obj iobj}
                         :subcat []}
                     :3 {:cat :noun
                         :case :acc
                         :sem obj
                         :subcat []}}})]}
 
 {:rule :aux-verbs-with-verb-arg
  :if {:cat :verb
       :aux true
       :subcat {:2 {:cat :verb}}}
  :then (let [agr (atom :top)
              sem (atom :top)
              subject (atom {:agr agr
                             :cat :noun
                             :subcat []})
              reflexive (atom :top)
              verb-argument
              {:agr agr
               :modal false
               :reflexive? reflexive
               :slash? false
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 []}}
              verb-argument-slash
              {:agr agr
               :modal false
               :reflexive? reflexive
               :slash? true
               :aux false
               :cat :verb
               :sem sem
               :subcat {:1 subject
                        :2 {:top :top}}}]
          
          [;; [s .she *[vp-aux *has .seen]]
           {:agr agr
            :reflexive? reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument}}

           ;; [nbar *cat .[s-slash .she *[vp-aux-slash *has .seen]]]
           {:agr agr
            :reflexive? reflexive
            :sem sem
            :subcat {:1 subject
                     :2 verb-argument-slash}}])}

 {:rule :reflexivity-te
  :if {:cat :verb
       :modal :te
       :subcat {:2 {:top :top}}}
  :then          
  [;; transitive and non-reflexive: "zij probeert het te zien"
   {:reflexive? false
    :subcat {:2 {:reflexive? false
                 :subcat {:2 []}}}}
   
   ;; transitive and reflexive: "zij probeert zich te zien"
   {:reflexive? true
    :subcat {:2 {:reflexive? true}}}]}
 
 {:rule :reflexivity-infinitive
  :if {:cat :verb
       :modal :infinitive
       :subcat {:2 {:top :top}}}
  :then  [;;  "kan <vp[base,nonmodal]>" non-reflexive
          {:derivation {:sense :non-reflexive}
           :reflexive? false
           :subcat {:2 {:reflexive? false}}}
          
          ;;  "kan <vp[base,nonmodal]>" reflexive
          {:derivation {:sense :reflexive}
           :reflexive? true
           :subcat {:2 {:reflexive? true}}}]}

 ;; verbs with prepositions as the object (e.g. "talks to her", "goes with him", etc.
 {:rule :prep-arg-reflexivity
  :if {:cat :verb
       :separable? false
       :reflexive? ::unspec
       :sem {:obj {:top :top}}
       :subcat {:2 {:cat :prep}
                :3 []}}
  :then (let [iobj (atom :top)
              agr (atom :top)]
          [{:reflexive? false
            :subcat {:2 {:reflexive? false}}}
           {:reflexive? true
            :sem {:subj iobj
                  :iobj iobj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive? true
                         :agr agr
                         :sem {:obj iobj}}}}])}

 {:rule :ditransitive-reflexivity
  :if {:cat :verb
       :subcat {:2 {:cat :prep}
                :3 {:cat :noun}}}
  :then (let [obj (atom :top)
              iobj (atom :top)
              agr (atom :top)]
          [{:reflexive? false
            :subcat {:2 {:reflexive? false}
                     :3 {:reflexive? false}}}
           {:reflexive? true
            :sem {:subj iobj
                  :iobj iobj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive? true
                         :agr agr
                         :sem {:obj iobj}}
                     :3 {:reflexive? false}}}
           {:reflexive? true
            :sem {:subj obj
                  :obj obj}
            :subcat {:1 {:agr agr}
                     :2 {:reflexive? false}
                     :3 {:agr agr
                         :sem obj
                         :reflexive? true}}}])}

 ;; TODO: add semantics for both [:subcat :2]'s.
 {:rule :verb-with-s
  :if {:cat :verb
       :subcat {:2 {:rule "s"
                    :cat :verb
                    :subcat []}}}
  :then [{:subcat {:2 {:subcat []}
                   :3 []}}]}

 ;; TODO: add semantics for both [:subcat :2]'s.
 {:rule :verb-with-comp2
  :if {:cat :verb
       :subcat {:2 {:rule "comp2"
                    :cat :comp
                    :subcat []}}}
  :then [{:subcat {:2 {:subcat []}
                   :3 []}}]}

 {:rule :nested-obj-null
  :if {:cat :verb
       :modal false
       :te? false
       :sem {:obj {:obj ::unspec}}}
  :then [{:sem {:obj {:obj :none}}}]}

 {:rule :third-person-accusative-pronoun-allowed-at-beginning?
  :if {:cat :noun
       :case :accusative
       :pronoun? true
       :agr {:person :3rd}
       :beginning-of-sentence? ::unspec
       :null? false}
  :then [{:beginning-of-sentence? false}]}

 {:rule :existential-false
  :if {:cat :noun
       :sem {:existential? ::unspec}}
  :then [{:sem {:existential? false}}]}

 {:rule :subj-is-non-existential
  :if {:cat :verb
       :te? false
       :sem {:subj {:existential? ::unspec}}}
  :then [{:sem {:subj {:existential? false}}}]}

 {:rule :obj-is-non-existential
  :if {:cat :verb
       :te? false
       :sem {:obj {:existential? ::unspec}}}
  :then [{:sem {:obj {:existential? false}}}]}

 {:rule :verbs-are-not-strong-by-default
  :if {:cat :verb
       :te? false
       :strong? ::unspec}
  :then [{:strong? false}]} 

 {:rule :nouns-are-non-human-by-default
  :if {:cat :noun
       :pronoun? false
       :reflexive? false
       :sem {:ref {:human? ::unspec}}}
  :then [{:sem {:ref {:human? false}}}]}
  
 {:rule :nouns-are-non-canine-by-default
  :if {:cat :noun
       :pronoun? false       
       :reflexive? false
       :sem {:ref {:canine? ::unspec}}}
  :then [{:sem {:ref {:canine? false}}}]}

 {:rule :prep
  :if {:cat :prep}
  :then [{:subcat []}
         (let [sem (atom :top)
               prep-root (atom :top)]
           {:sem sem
            :separable-prep prep-root
            :subcat {:1 {:cat :noun
                         :case :accusative
                         :root prep-root
                         :sem sem
                         :subcat []}
                     :2 []}})]}

 ;; TODO: replace all above {:reflexive? false} rules
 ;; and just use this.
;; {:rule :nonreflexive
;;  :if {:reflexive? ::unspec}
;;  :then [{:reflexive? false}]}


 {:rule :nouns-are-not-numbers-by-default
  :if {:cat :noun
       :sem {:number? ::unspec}}
  :then [{:sem {:number? false}}]}
 
 {:rule :is-conj
  :if {:cat :conjunction}
  :then [(let [subcat (atom :top)]
           {:conjunction? true
            :subcat {:1 {:conjunction? false
                         :subcat subcat}
                     :2 {:conjunction? false
                         :subcat subcat}}})]}
 ]

