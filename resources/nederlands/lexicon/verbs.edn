{"aangekonigen" [{:sem {:pred :announce}}]
 "bedelven" [{:sem {:pred :overwhelm}
              :strong? :e-o-o}]
 "bedriegen" [{:sem {:pred :cheat}
               :strong? :ie-oo-o}]
 "bellen" [{:sem {:pred :telephone}}]
 "bereiken" [{:sem {:pred :achieve}}]
 "bergen" [{:sem {:pred :save
                  :org {:top :top}}
            :strong? :e-o-o}]
 "beseffen" [{:sem {:pred :realize}}]
 "bestrijden" [{:curriculum :basic
                :sem {:pred :overcome}
                :exceptions [{:surface "bestreed"
                              :infl :past-simple
                              :agr {:number :sing}}
                             {:surface "bestreden"
                              :infl :past-simple
                              :agr {:number :plur}}]}]
 "bewegen" [{:sem {:pred :move}
             :strong? :e-o-o}]
 "bieden" [{:sem {:pred :offer}
            :strong? :ie-oo-o}]
 "blaffen" [{:sem {:pred :bark
                   :obj :none
                   :ref {:canine? true}}}]
 "blazen" [{:sem {:pred :blow
                  :obj :none}
            :strong? :a-ie-a}]
 "blijven" [{:sem {:pred :stay
                   :obj :none}
             :strong? true}]
 "brengen" (let [exceptions [{:infl :past-simple
                              :agr {:number :sing}
                              :surface "bracht"}
                             {:infl :past-simple
                              :agr {:number :plur}
                              :surface "brachten"}
                             {:infl :past-participle
                              :surface "gebracht"}]]
             [{:exceptions exceptions
               :sem {:pred :bring
                     :obj {:top :top}}}])
 "bruizen" [{:sem {:pred :bubble}}]
 "dragen" [{:strong? :a-oe-a
            :sem {:pred :carry
                  :obj {:top :top}}}
           {:strong? :a-oe-a
            :sem {:pred :wear
                  :obj {:top :top}}}]
 "dromen" [{:sem {:pred :dream}}]
 "eten" (let [exceptions [{:infl :present
                           :agr {:number :sing}
                           :surface "eet"}]]
          [{:sem {:pred :eat}
            :strong? :e-a-e}])
 "ervaren" (let [exceptions [{:infl :past-simple
                              :agr {:number :sing}
                              :surface "ervoer"}
                             {:infl :past-simple
                              :agr {:number :plur}
                              :surface "ervoeren"}]]
             [{:sem {:pred :experience}
               :exceptions exceptions}])
 "fluisteren" [{:sem {:pred :whisper}}]
 "graven" (let [exceptions [{:infl :past-simple
                              :agr {:number :sing}
                             :surface "groef"}
                            {:infl :past-simple
                             :agr {:number :plur}
                             :surface "groeven"}]]
            [{:sem {:pred :dig}
              :exceptions exceptions}])
 "gaan" [{:curriculum :basic
          :sem {:pred :go
                :obj :none}
          :exceptions [{:infl :present
                        :surface "ga"
                        :agr {:person :1st
                              :number :sing}}
                       {:infl :present
                        :surface "gaat"
                        :agr {:person :2nd
                              :number :sing}}
                       {:infl :present
                        :surface "gaat"
                        :agr {:person :3rd
                              :number :sing}}
                       {:infl :past-simple
                        :agr {:number :sing}
                        :surface "ging"}
                       {:infl :past-simple
                        :agr {:number :plur}
                        :surface "gingen"}]}]
 "geloven" [{:sem {:pred :believe}}]
 "genezen" [{:sem {:pred :heal}
             :strong? :e-a-e}]
 "hebben" [{:curriculum :basic
            :sem {:pred :have}
            :exceptions [{:infl :present
                          :surface "heb"
                          :agr {:person :1st
                                :number :sing}}
                         {:infl :present
                          :surface "hebt"
                          :agr {:person :2nd
                                :number :sing}}
                         ;; for "u", either "hebt" (above)
                         ;; or "heeft (below) is possible (F 33.1):
                         {:infl :present
                          :surface "heeft"
                          :agr {:person :2nd
                                :number :sing}
                          :sem {:ref {:context :formal}}}
                         {:infl :present
                          :surface "heeft"
                          :agr {:person :3rd
                                :number :sing}}
                         {:infl :present
                          :surface "hebben"
                          :agr {:number :plur}}
                         {:infl :past-simple
                          :surface "had"
                          :agr {:number :sing}}
                         {:infl :past-simple
                          :surface "hadden"
                          :agr {:number :plur}}]}]

 "hoesten" [{:sem {:pred :cough
                   :obj :none}}]

 "hopen" ;; intransitive only for now:
 [{:sense 1
   :sem {:pred :hope
         :obj :none}}]

 ;; c.f. "weten", where [:sem :obj :ref :human?]=false:
 "kennen" (let [exceptions
                [{:infl :present
                  :agr {:number :sing
                        :person :1st}
                  :surface "ken"}
                 {:infl :present
                  :agr {:number :sing
                        :person :2nd}
                  :surface "kent"}
                 {:infl :present
                  :agr {:number :sing
                        :person :3rd}
                  :surface "kent"}]]
            [{:sem {:pred :know
                    :subj {:ref {:human? true}}
                    :obj :none}
              :exceptions exceptions}
             {:sem {:pred :know
                    :subj {:ref {:human? true}}
                    :obj {:ref {:human? true}}}
              :exceptions exceptions}])
 
 "kijken"
 [{:curriculum :basic
   :strong? true
   :sem {:pred :look
         :obj :none}}]
                   
 "komen"
 (let [exceptions [{:infl :past-simple
                    :agr {:number :sing}
                    :surface "kwam"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "kwamen"}]]
   [{:curriculum :basic
     :sem {:pred :come
           :obj :none}
      :exceptions exceptions}])

 "kunnen" ;; F. 40.1
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "kan"}

                   {:infl :present
                    :subj {:ref {:context :informal}}
                    :agr {:person :2nd :number :sing}
                    :surface "kunt"}

                   {:infl :present
                    :subj {:ref {:context :informal}}
                    :agr {:person :2nd :number :sing}
                    :surface "kan"}

                   {:infl :present
                    :subj {:ref {:context :formal}}
                    :agr {:person :2nd :number :sing}
                    :surface "kunt"}

                    {:infl :present
                     :agr {:person :3rd :number :sing}
                     :surface "kan"}

                   {:infl :past-simple
                    :agr {:number :sing}
                    :surface "kon"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "konden"}]]
   [{:curriculum :basic
     :modal :infinitive
     :sem {:pred :be-able-to}
     :exceptions exceptions}])

 "lezen"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "lees"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "leest"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "leest"}]]
       [{:curriculum :basic
         :strong? :e-a-e
         :exceptions exceptions
         :sem {:pred :read}}])
 "luieren" [{:sem {:pred :laze
                   :obj :none}}]
 "lukken" [{:sem {:pred :succeed
                  :obj :none}}]
 "maken" [{:sem {:pred :make}}]

 "mogen" ;; F. 40.1
 (let [exceptions [{:infl :present
                    :agr {:number :sing}
                    :surface "mag"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :modal :infinitive
     :sem {:pred :be-allowed}}])

 "moeten" ;; F. 40.1
 (let [exceptions [{:infl :past-simple
                    :agr {:number :sing}
                    :surface "moest"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "moesten"}]]
   [{:curriculum :basic
     :modal :infinitive
     :sem {:pred :must}
     :exceptions exceptions}])

 "niezen" [{:sem {:pred :sneeze
                  :obj :none}}]
 
 "omarmen" [{:sem {:pred :embrace}}]
 "ontworpen" [{:sem {:pred :design}}]
 "optreden" [{:separable? true
              :separable-prep "op"
              :sem {:pred :perform}
              :strong? :e-a-e}]

 "proberen"
 ;; TODO: can be done regularly like "vergeten" <-> "vergeet"
 ;; FIXME: analyze is incorrectly allowing "prober" and "probert"
 ;; as valid conjunctions.
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "probeer"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "probeert"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "probeert"}]]
   [{:sem {:pred :try
           :obj :none}}
    {:curriculum :basic
     :modal :te
     :sem {:pred :try}
     :exceptions exceptions}])
 "slaan" (let [exceptions [{:infl :present
                            :agr {:number :sing
                                  :person :1st}
                            :surface "sla"}
                           {:infl :past-simple
                            :agr {:number :sing}
                            :surface "sloeg"}
                           {:infl :past-simple
                            :agr {:number :plur}
                            :surface "sloegen"}]]
            [{:sem {:pred :hit}
              :exceptions exceptions}
             {:sem {:pred :strike}
              :exceptions exceptions}])
 "slapen"
 ;; TODO: should not need these exceptions:
 ;; the rule is regular enough that we
 ;; can move it to morphology
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "slaap"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "slaapt"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "slaapt"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :strong? :a-ie-a
     :sem {:pred :sleep
           :subj {:prop {:animate true}} ;; TODO: move to encyclopedia.
           :obj :none}}])


 "gapen"
 [{:curriculum :basic
   ;; not sure if this verb is strong or not, but
   ;; copied this from "slapen", which has the :strong?,
   ;; so saving it but commenting out here:
   ;;:strong? :a-ie-a
   :sem {:pred :yawn
         :subj {:prop {:animate true}} ;; TODO: move to encyclopedia.
         :obj :none}}]

 "spelen"
 ;; TODO: should not need these exceptions:
 ;; the rule is regular enough that we
 ;; can move it to morphology
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "speel"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "speelt"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "speelt"}]]
   [{:exceptions exceptions
     :sem {:pred :play
           :subj {:prop {:animate true}}}}]) ;; TODO: move to encyclopedia.
 
 "staan" (let [exceptions [{:infl :present
                            :agr {:number :sing
                                  :person :1st}
                            :surface "sta"}
                           {:infl :past-simple
                            :agr {:number :sing}
                            :surface "stond"}
                           {:infl :past-simple
                            :agr {:number :plur}
                            :surface "stonden"}]]
           [{:sem {:pred :stand
                   :obj :none}
             :exceptions exceptions}])

 "te"
 [(let [sem (atom :top)
        reflexive? (atom :top)]
    {:curriculum :basic
     :infl :te
     :te? true
     :inflected? true
     :reflexive? reflexive?
     :sem sem
     :subcat {:1 {:cat :verb
                  :modal :none
                  :reflexive? reflexive?
                  :subcat {:1 {:cat :noun ;; prevent "[vp:inf te te]"
                               :sem {:existential? false}}}
                  :infl :infinitive
                  :sem sem}
              :2 []}})]
 "tegengehouden" [{:sem {:pred :inhibit}

                   ;; Verbix 2021, Dutch verb 'tegengehouden' conjugated, Verbix, viewed 27 Feb 2021,
                   ;; <http://www.verbix.com/webverbix/go.php?T1=tegengehouden&Submit=Go&D1=24&H1=124>
                   :exceptions [{:infl :past-simple
                                 :surface "tegenhield"
                                 :agr {:number :sing}}
                                {:infl :past-simple
                                 :surface "tegenhielden"
                                 :agr {:number :plur}}]}]
 "toenemen" [{:sem {:pred :increase}}]
 "toeven" [{:sem {:pred :linger
                   :obj :none}}]
 "treden" [{:sem {:pred :move
                  :obj :none}
            :strong? :e-a-e}
           {:sem {:pred :step
                  :obj :none}
            :strong? :e-a-e}]
 "uitgeleggen" [{ :sem {:pred :explain}}]
 "uitweiden" [{:sem {:pred :elaborate}}]
 "uitwijken" [{:sem {:pred :emigrate}}]
 "wassen" [{:sem {:pred :wash}}]
 "werken" [{:curriculum :basic
            :sem {:pred :work
                  :obj :none}}]
 "weten" (let [exceptions
               [{:infl :present
                 :agr {:number :sing}
                 :surface "weet"}
                {:infl :past-simple
                 :agr {:number :sing}
                 :surface "wist"}
                {:infl :past-simple
                 :agr {:number :plur}
                 :surface "wisten"}]]
           [{:curriculum :basic
             :sem {:pred :know
                   :subj {:ref {:human? true}}
                   :obj :none}
             :exceptions exceptions}
            {:curriculum :basic
             :reflexive? false
             :sem {:pred :know
                   :subj {:ref {:human? true}}
                   :obj {:ref {:human? false}}}
             :exceptions exceptions}])

 "willen" ;; F. 40.1
 (let [exceptions [{:infl :present
                    :agr {:number :sing}
                    :surface "wil"}
                   {:infl :present
                    :agr {:number :sing
                          :person :2nd}
                    :surface "wilt"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :modal :infinitive
     :sem {:pred :want}}])

 "vallen" [{:strong? :a-ie-a
            :sem {:pred :fall
                  :obj :none}}]
 "varen" [{:strong? :a-oe-a
           :sem {:pred :sail}}]
 "verbergen" [{:sem {:pred :hide}}]
 "vergeten" [{:strong? :e-a-e
              :sem {:pred :forget}}]
 "verhogen" [{:sem {:pred :increase}}]
 "veroorzaaken" [{:sem {:pred :cause}}]
 "verpesten" [{:sem {:pred :ruin}}]
 "vertrekken" [{:sem {:pred :depart
                      :obj :none}
                :strong? :e-o-o}]
 "vinden" [(let [obj (atom {:top :top})]
             {:curriculum :basic
              :strong? true
              :sem {:pred :like
                    :obj obj}
              :subcat {:2 {:cat :adjective
                           :phrasal? false
                           :canonical "leuk"}
                       :3 {:cat :noun
                           :subcat [] ;; <- TODO: should be a lexical rule
                           :case :acc
                           :sem obj}}})]
 "voeren" [{:sem {:pred :feed}}]
 "voorkomen" [{:sem {:pred :prevent}}
              {:sem {:pred :avoid}}]
 ;; commented out for now
 ;; "vrezen" [{:sem {:pred :be-afraid}}]
 "zeggen"
 (let [exceptions [{:infl :past-simple
                    :agr {:number :sing}
                    :surface "zei"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "zeiden"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :sem {:pred :say}}])

 "zien"
 (let [exceptions [{:infl :present
                    :agr {:person :1st
                          :number :sing}
                    :surface "zie"}
                   {:infl :present
                    :agr {:person :2nd
                          :number :sing}
                    :surface "ziet"}
                   {:infl :present
                    :agr {:person :3rd
                          :number :sing}
                    :surface "ziet"}
                   {:infl :past-simple
                    :agr {:number :sing}
                    :surface "zag"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "zagen"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :sem {:pred :see}}])

 "zijn"
 (let [exceptions [{:infl :present
                    :agr {:person :1st :number :sing}
                    :surface "ben"}
                   {:infl :present
                    :agr {:person :2nd :number :sing}
                    :surface "bent"}
                   {:infl :present
                    :agr {:person :3rd :number :sing}
                    :surface "is"}
                   {:infl :past-simple
                    :agr {:number :sing}
                    :surface "was"}
                   {:infl :past-simple
                    :agr {:number :plur}
                    :surface "waren"}]]
   [{:curriculum :basic
     :exceptions exceptions
     :sem {:pred :be}}])

 "zingen"
 [{:curriculum :basic
   :sem {:pred :sing}
   :exceptions [{:infl :past-simple
                 :agr {:number :sing}
                 :surface "zong"}
                {:infl :past-simple
                 :agr {:number :plur}
                 :surface "zongen"}]}]}
