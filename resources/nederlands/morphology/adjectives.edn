(let [plur-modifier
      {:cat :adjective
       :agr {:number :plur}
       :modifies-noun? true}
      definite-singular-modifier
      {:cat :adjective
       :definite? true
       :agr {:number :sing}
       :modifies-noun? true}
      indefinite-singular-common-modifier
      {:cat :adjective
       :definite? false
       :agr {:gender :common
             :number :sing}
       :modifies-noun? true}]
  [{:g [#"" ""]
    :p [#"" ""]
    :u {:cat :adjective
        :null? false
        :sem {:number? true}}}
   {:g [#"" ""]
    :p [#"" ""]
    :u {:cat :adjective
        :null? true}}

   ;; F. p 4 "Adjectives have no ending if they precede a singular neuter noun in an indefinite context: i.e.
   ;;         after een 'a', geen 'no/not a', elk 'each'.."
   {:g [#"$" ""]
    :p [#"([^e])" "$1"]
    :u {:cat :adjective
        :agr {:gender :neuter
              :number :sing}
        :sem {:number? false}
        :definite? false
        :null? false
        :inflection :adj-no-e-suffix
        :modifies-noun? true}}

   ;; generation: hedendaag   -> hedendaagse
   ;; parsing:    hedendaagse -> hedendaag
   (let [g [#"(daag)$"   "$1se"]
         p [#"(daag)se$" "$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: groot -> grote
   ;; parsing:    grote -> groot
   ;; TODO: use (let ..) to express commonalities, as we do below for
   ;; stom->stomme and dik->dikke
   ;; TODO: merge this with eenzaam -> eenzame
   ;; rule below.
   (let [g [#"ot$" "te"]
         p [#"te$" "ot"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])


   ;; generation: laag -> lage
   ;; parsing:    lage -> laag
   ;; TODO: merge this with eenzaam -> eenzame
   ;; rule below.
   (let [g [#"aag$" "age"]
         p [#"age$" "aag"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: vies -> vieze
   ;; parsing:    vieze -> vies
   (let [g [#"s$"   "ze"]
         p [#"ze$"  "s"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: stom   -> stomme
   ;; parsing:    stomme -> stom
   (let [g [#"([lt])([aeiou])([m])$" "$1$2$3$3e"]
         p [#"([lt])([aeiou])mme$"   "$1$2m"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: dik   -> dikke
   ;;             gek   -> gekke
   ;; parsing:    dikke -> dik
   ;;             gekke -> gek
   (let [g [#"([dg])([ei])([k])$" "$1$2$3$3e"]
         p [#"([dg])([ei])kke$"   "$1$2k"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: openbaar -> openbare;eenzaam -> eenzame
   ;; parsing:    openbare -> openbaar;eenzame -> eenzaam
   (let [g [#"(a)(a)([mrv])$"   "$1$3e"]
         p [#"a([mrv])e$"       "aa$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: breed -> brede
   ;; parsing:    brede -> breed
   (let [g [#"(e)(e)([d])$"   "$1$3e"]
         p [#"e([d])e$"       "ee$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])
   
   ;; generation: gaaf -> gave
   ;; parsing:    gave -> gaaf
   (let [g [#"aaf$" "ave"]
         p [#"ave$" "aaf"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: lief -> lieve
   ;; parsing:    lieve -> lief
   (let [g [#"f$"   "ve"]
         p [#"ve$"  "f"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])
   
   ;; buitengewoon -> buitengewone
   (let [g [#"(o)(o)([n])$"   "$1$3e"]
         p [#"o([n])e$"       "oo$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   ;; generation: klein -> kleine
   ;; parsing:    kleine -> klein
   ;; but avoid:
   ;;    groot -> *groote
   ;; instead, groot -> grote is handled above with the
   ;; rule above with the comment "groot -> grote".
   (let [g [#"([aieou][aeiou][^t])$"  "$1e"]
         p [#"([aieou][aeiou][^t])e$" "$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])

   (let [g [#"([^aeiou])$"  "$1e"]
         p [#"([^aeiou])e$" "$1"]]
     [{:g g
       :p p
       :u plur-modifier}
      {:g g
       :p p
       :u definite-singular-modifier}
      {:g g
       :p p
       :u indefinite-singular-common-modifier}])])
