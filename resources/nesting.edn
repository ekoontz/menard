;; These are rules for sharing
;; contents of various word- or phrase-
;; level maps, when nesting applies
;; (i.e. when the :mod of the head's :sem is nested
;;  within the parent's :sem).
;;
[
 ;; comp-modifies:
 ;;
 ;; sem|mod|first [1]
 ;; |
 ;; comp
 ;; |
 ;; sem [1]
 ;; 
 ;; comp-modifies is used by:
 ;; - rest-of-mods-unnested
 ;; - rest-of-mods-nested (below).
 ;;
 (let [mod (atom :top)]
   {:def 'comp-modifies 
    :mods-nested? true
    :sem {:mod {:first mod}}
    :comp {:mods-nested? true
           :sem mod}
    :head {:mods-nested? false}})
 
 ;; A grammatical rule can inherit from
 ;; at most one (i.e. could be 0) of:
 ;; 
 ;; - rest-of-mods-unnested
 ;; - rest-of-mods-nested
 ;; - cons-only
 ;; - nest-only
 ;;
 ;; This exclusivity is enforced by the ::only-one-allowed-of below.
 ;;
 ;; If a rule inherits from:
 ;; - rest-of-mods-unnested,
 ;; - rest-of-mods-nested or
 ;; - nest-only
 ;;
 ;; then it should also inherit
 ;; from exactly one of the following (in this
 ;; file below in 'part-2'):
 ;; 
 ;; - adjective
 ;; - noun
 ;; - verb
 ;;
 ;; These per-part-of-speech rules make sure that
 ;; the inner contents of the head's :sem
 ;; get copied up to the parent's :sem.
 
 ;; - rest-of-mods-unnested:
 ;; The parent's [:sem :mod] is the cons of:
 ;;   1) comp's :sem         (the first of the list)
 ;;   2) head's [:mod]       (the rest of the list)
 ;;
 ;;         sem|mod|first[1]
 ;;            |   |rest [2]
 ;;           / \
 ;;      head    comp
 ;;     mod[2]    sem[1]
 ;;      
 (let [head-mod (atom :top)]
   {:def 'rest-of-mods-unnested
    :unify ['comp-modifies]
    ::only-one-allowed-of :rest-of-mods-unnested
    :sem {:mod {:rest head-mod}}
    :head {:mod head-mod}})

 ;; rest-of-mods-nested:
 ;; The parent's [:sem :mod] is the cons of:
 ;;   1) comp's :sem         (the first of the list)
 ;;   2) head's [:sem :mod]  (the rest of the list)
 ;;
 ;;       sem|mod|first[1]
 ;;          |   |rest [2]
 ;;         / \
 ;;     head   comp
 ;; sem|mod[2]  sem[1]
 ;;
 (let [head-mod (atom :top)]
   {:def 'rest-of-mods-nested
    :unify ['comp-modifies]
    ::only-one-allowed-of :rest-of-mods-nested
    :sem {:mod {:rest head-mod}}
    :head {:sem {:mod head-mod}}})

 ;; nest-only:
 ;; The parent's [:sem :mod] is the head's :mod.
 ;; The comp is not involved in the parent's :mod
 ;; (although the head's :subcat might target the :comp
 ;;  independently of this rule)
 ;; 
 ;;      sem|mod[1]
 ;;       /   \
 ;;    head    comp
 ;;    mod[1]
 ;;
 (let [one (atom :top)]
   {:def 'nest-only
    ::only-one-allowed-of :nest-only
    :mods-nested? true
    :sem {:mod one}
    :mod nil
    :head {:mods-nested? false
           :mod one}
    :comp {:mods-nested? true}})
 
 ;; cons-only:
 ;;     mod|first = comp|sem
 ;;     mod|rest  = head|mod
 ;; The parent's [:mod] is the cons of:
 ;;   first: comp's :sem
 ;;   rest:  head's [:mod]
 ;;
 ;;         mod|first[1]
 ;;          | |rest [2]
 ;;         / \
 ;;     head   comp
 ;;    mod[2]  sem[1]
 ;;
 (let [one (atom :top)
       two (atom :top)]
   {:unify ['menard.ug/head-sem 'menard.ug/head-rule]
    :def 'cons-only
    ::only-one-allowed-of :cons-only
    :mods-nested? false
    :mod {:first one
          :rest two}
    :head {:mod two
           :mods-nested? false}
    :comp {:mods-nested? true
           :sem one}})

;; part 2: part-of-speech-specific
;; nesting rules.
;; any grammar rule that is either
;; cons-and-nest or nest-only
;; needs to also include one of the
;; following (2a, 2b, or 2c),
;; depending on the :cat of the :head
;; (and :cat) of the parent.
;; 
;; This is because with cons-and-nest or nest-only
;; rules, the :sem of the head is distinct from
;; the :sem of the parent, but all of the
;; contents within the :sem *are* shared
;; between head and parent.
;; The parent's :sem therefore has all of the
;; contents of the :head's sem, plus the :mod
;; of the complement, so that the adjunct complement
;; can modify the semantics of the heads.

 ;; 2.a.: adjective-headed phrases
 (let [one (atom :top)
       two (atom :top)]
   {:def  'adjective
    :cat :adjective
    :sem {:pred one
          :number? two}
    :head {:sem {:pred one
                 :number? two}}})

 ;; 2.b.: noun-headed phrases
 (let [one (atom :top)
       two (atom :top)
       three (atom :top)
       four (atom :top)
       five (atom :top)
       six (atom :top)]
   {:def 'noun
    :cat :noun
    :sem {:pred one
          :quant two
          :ref three
          :context four
          :existential? five
          :number? six}
    :head {:sem {:pred one
                 :quant two
                 :ref three
                 :context four
                 :existential? five
                 :number? six}}})

 ;; 2.c.: verb-headed phrases
 (let [one (atom :top)
       two (atom :top)
       three (atom :top)
       four (atom :top)]
   {:def 'verb
    :cat :verb    
    :sem {:pred one
          :subj two
          :obj three}
    :head {:sem {:pred one
                 :subj two
                 :obj three}}})]


