[;; 1
 {:cat :adjective}
 {:cat :adverb}
 {:cat :intensifier}
 {:cat :neg}
 {:cat :noun}
 {:cat :prep}
 
 ;; intransitive verbs "ik zie"
 {:cat :verb
  :sem {::refl-match 7
        :arg1 :none
        :arg2 :none
        :obj :none}}
 
 ;; reflexive case (non modal): "ik zie me"
 (let [ref (atom :top)]
   {:cat :verb
    :modal false
    :reflexive? true
    :sem {::refl-match 8
          :subj {:ref ref}
          :obj {:ref ref
                :obj :none}
          :arg1 :none
          :arg2 :none}})
 
 ;; reflexive case (modal) e.g. "ik probeer me te zien"
 (let [ref (atom :top)]
   {:cat :verb
    
    ;; TODO: language-dependent: only Dutch has :te value for :modal.
    :modal :te

    :reflexive? true
    :sem {::refl-match 9
          :subj {:ref ref}
          :obj {:obj {:ref ref
                      :obj :none}}}})

 ;; reflexive case with conjunctions
 ;; e.g. "[niet Ina maar mezelf]"
 (let [subj-and-obj-ref (atom :top)]
   {:cat :conjunction
    :reflexive? true
    :head {:reflexive? true}
;;    :comp {:reflexive? false}    
    :sem {::refl-match 10
          :subj {:ref subj-and-obj-ref}
          :arg1 {:obj {:ref subj-and-obj-ref}}}})

 ;; reflexive case with conjunctions
 ;; e.g. "[niet mezelf maar Ina]"
 (let [subj-and-obj-ref (atom :top)]
   {:cat :conjunction
    :reflexive? true
    :head {:reflexive? false}    
;;    :comp {:reflexive? false}
;;    :head {:reflexive? true}
    :sem {::refl-match 11
          :subj {:ref subj-and-obj-ref}
          :arg2 {:obj {:ref subj-and-obj-ref}}}})
 
 {:cat :conjunction
  :reflexive? false
  :sem {::refl-match 12}}
 
 ;; nonreflexive cases: we force the subj's :ref and obj's
 ;; :ref to be to be distinct from each other.
 ;; In addition, if :subj's :person is :1st or :2nd,
 ;; prevent :obj's person from being the same.
 ;; i.e. prevent non-reflexive "I see me" or
 ;; "you see you".
 ;; but for :3rd, "he sees him" is ok, as long as the
 ;; subj :ref and :obj :ref are distinct.
 {:cat :verb
  :agr {:person :1st}
  :sem {:subj {:person :1st
               :ref {::is-subj true}}
        ::refl-match 13
        :arg1 :none
        :arg2 :none
        :obj {:person-not :1st
              :ref {::is-subj false}
              :obj :none}}}
 
 {:cat :verb
  :agr {:person :1st}
  :sem {:subj {:person :1st
               :ref {::is-subj true}}
        ::refl-match 14
        :arg1 :none
        :arg2 :none
        :obj {:obj {:person-not :1st}
              :ref {::is-subj false}}}}

 {:cat :verb
  :agr {:person :2nd}
  :sem {:subj {:person :2nd
               :ref {::is-subj true}}
        ::refl-match 15
        :obj {:person-not :2nd
              :obj :none
              :ref {::is-subj false}}}}

 {:cat :verb
  :agr {:person :2nd}
  :sem {:subj {:person :2nd
               :ref {::is-subj true}}
        ::refl-match 16
        :obj {:obj {:person-not :2nd}
              :ref {::is-subj false}}}}

 {:cat :verb
  :agr {:person :3rd}
  :sem {::refl-match 17
        :subj {:person :3rd
               :existential? false
               :ref {::is-subj true}}
        :obj {:ref {::is-subj false}}}}

 ;; for conjunctions e.g. [vp-conj zie [conj-outer niet Ina maar mezelf]]
 ;; arg2's object is "Ina"
 ;; arg1's object is "mezelf"
;; (comment
   (let [subj-and-obj-ref (atom {::is-subj true})]
   {:cat :verb
    :subcat {:1 {:cat :noun
                 :sem {:subj {:ref subj-and-obj-ref}}}
             :2 []}
    :reflexive? true
    :head {:reflexive? true
           :cat :verb}
    :sem {:arg1 {:subj {:ref subj-and-obj-ref}
                 :obj {:ref subj-and-obj-ref}}
          :arg2 {:subj {:ref subj-and-obj-ref}
                 :obj {:ref {::is-subj false}}}
          :pred :and
          ::refl-match 18}})
;;   )

 ;; doesn't work yet:
 ;; for conjunctions e.g. [vp-conj zie [conj-outer niet mezelf maar Ina]]
 (comment
 (let [subj-and-obj-ref (atom :top)]
   {:cat :verb
    :subcat {:1 {:sem {:subj {:ref subj-and-obj-ref}}}}    
    :reflexive? true
    :head {:reflexive? true}
    :sem {:arg2 {:subj {:ref subj-and-obj-ref}
                 :obj {:ref subj-and-obj-ref}}
          :pred :and
          ::refl-match 19}})
         )
 ]





